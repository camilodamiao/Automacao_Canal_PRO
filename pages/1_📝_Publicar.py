# pages/1_üìù_Publicar.py
"""
P√°gina de publica√ß√£o de im√≥veis
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import json

# Importar fun√ß√µes necess√°rias
from src.utils.database import get_imoveis_nao_publicados, get_codigos_disponiveis
from src.publisher.helpers import detectar_subtipo, validar_dados, TIPO_IMOVEL_MAP

st.set_page_config(page_title="Publicar Im√≥vel", layout="wide")

st.title("üìù Publicar Im√≥vel no Canal PRO")

# Verificar se h√° im√≥veis dispon√≠veis
imoveis = get_imoveis_nao_publicados()

if not imoveis:
    st.warning("‚ö†Ô∏è Nenhum im√≥vel dispon√≠vel para publica√ß√£o")
    st.info("Fa√ßa o scraping de um im√≥vel primeiro usando: `python src/scraper/gintervale_scraper.py CODIGO`")
    st.stop()

# Sele√ß√£o do im√≥vel
st.markdown("### 1Ô∏è‚É£ Selecione o Im√≥vel")

# Criar DataFrame para exibi√ß√£o
df_imoveis = pd.DataFrame(imoveis)
df_display = df_imoveis[['codigo', 'titulo', 'tipo', 'preco', 'area', 'quartos']].copy()
df_display['preco'] = df_display['preco'].apply(lambda x: f"R$ {x:,.2f}" if x else "Sem pre√ßo")
df_display['area'] = df_display['area'].apply(lambda x: f"{x}m¬≤" if x else "-")

# Sele√ß√£o com preview
col1, col2 = st.columns([1, 2])

with col1:
    selected_index = st.selectbox(
        "C√≥digo do Im√≥vel",
        range(len(imoveis)),
        format_func=lambda x: f"{imoveis[x]['codigo']} - {imoveis[x]['titulo'][:40]}..."
    )
    
    imovel_selecionado = imoveis[selected_index]

with col2:
    # Preview do im√≥vel
    st.markdown("**Preview:**")
    st.write(f"üìç **Localiza√ß√£o:** {imovel_selecionado.get('localizacao', 'N/A')}")
    st.write(f"üí∞ **Pre√ßo:** R$ {imovel_selecionado.get('preco', 0):,.2f}")
    st.write(f"üìê **√Årea:** {imovel_selecionado.get('area', 0)}m¬≤")
    
    # Mini galeria de fotos
    if imovel_selecionado.get('fotos'):
        st.write(f"üì∏ **{len(imovel_selecionado['fotos'])} fotos dispon√≠veis**")
        cols = st.columns(4)
        for i, foto in enumerate(imovel_selecionado['fotos'][:4]):
            with cols[i]:
                st.image(foto, use_column_width=True)

st.markdown("---")

# Formul√°rio de dados
st.markdown("### 2Ô∏è‚É£ Complete os Dados")

# Verificar dados obrigat√≥rios faltando
dados_faltando = []
if not imovel_selecionado.get('preco'):
    dados_faltando.append("Pre√ßo")
if len(imovel_selecionado.get('fotos', [])) < 3:
    dados_faltando.append(f"Fotos (m√≠nimo 3, atual: {len(imovel_selecionado.get('fotos', []))})")

if dados_faltando:
    st.error(f"‚ùå Dados obrigat√≥rios faltando: {', '.join(dados_faltando)}")
    st.stop()

# Formul√°rio em colunas
col1, col2 = st.columns(2)

with col1:
    st.markdown("#### üìç Endere√ßo")
    
    cep = st.text_input(
        "CEP*",
        value=imovel_selecionado.get('cep', ''),
        placeholder="00000-000",
        help="Digite o CEP no formato 00000-000"
    )
    
    endereco = st.text_input(
        "Endere√ßo (Rua)*",
        value=imovel_selecionado.get('endereco', ''),
        placeholder="Rua Example"
    )
    
    numero = st.text_input(
        "N√∫mero*",
        value=imovel_selecionado.get('numero', ''),
        placeholder="123"
    )
    
    complemento = st.text_input(
        "Complemento",
        value=imovel_selecionado.get('complemento', ''),
        placeholder="Apto 101, Bloco A"
    )
    
    bairro = st.text_input(
        "Bairro*",
        value=imovel_selecionado.get('bairro', ''),
        placeholder="Centro"
    )
    
    # Cidade e Estado (j√° temos do scraping)
    cidade = st.text_input(
        "Cidade*",
        value=imovel_selecionado.get('cidade', ''),
        disabled=True
    )
    
    estado = st.text_input(
        "Estado*",
        value=imovel_selecionado.get('estado', ''),
        disabled=True
    )

with col2:
    st.markdown("#### üè∑Ô∏è Configura√ß√µes de Publica√ß√£o")
    
    # Tipo e subtipo
    tipo_principal = imovel_selecionado.get('tipo', 'Apartamento')
    st.text_input("Tipo Principal", value=tipo_principal, disabled=True)
    
    # Detectar subtipo automaticamente
    subtipo_sugerido = detectar_subtipo(
        imovel_selecionado.get('titulo', ''),
        imovel_selecionado.get('descricao', '')
    )
    
    subtipos = TIPO_IMOVEL_MAP.get(tipo_principal, {}).get('subtipos_possiveis', ['Padr√£o'])
    subtipo_index = 0
    if subtipo_sugerido in subtipos:
        subtipo_index = subtipos.index(subtipo_sugerido)
    
    subtipo = st.selectbox(
        "Subtipo do Im√≥vel",
        options=subtipos,
        index=subtipo_index,
        help="Selecione o subtipo mais apropriado"
    )
    
    # C√≥digo do corretor
    codigos_disponiveis = get_codigos_disponiveis()
    
    if not codigos_disponiveis:
        st.error("‚ùå Nenhum c√≥digo de corretor dispon√≠vel!")
        st.stop()
    
    codigo_corretor = st.selectbox(
        f"C√≥digo do Corretor* ({len(codigos_disponiveis)} dispon√≠veis)",
        options=[c['codigo'] for c in codigos_disponiveis],
        help="Selecione um c√≥digo dispon√≠vel"
    )
    
    # Destacar an√∫ncio
    destacar = st.checkbox(
        "‚≠ê Destacar este an√∫ncio",
        value=False,
        help="Usar um c√≥digo destac√°vel (se dispon√≠vel)"
    )
    
    # Andar (para apartamentos)
    if tipo_principal == "Apartamento":
        andar = st.number_input(
            "Andar",
            min_value=0,
            max_value=50,
            value=0,
            help="Informe o andar do apartamento"
        )
    else:
        andar = None

st.markdown("---")

# Preview final
st.markdown("### 3Ô∏è‚É£ Revisar e Publicar")

# Validar dados
dados_completos = {
    **imovel_selecionado,
    'cep': cep,
    'endereco': endereco,
    'numero': numero,
    'complemento': complemento,
    'bairro': bairro,
    'subtipo': subtipo,
    'codigo_corretor': codigo_corretor,
    'destacar': destacar,
    'andar': andar
}

validacao = validar_dados(dados_completos)

# Mostrar status de valida√ß√£o
col1, col2 = st.columns([2, 1])

with col1:
    if validacao['valido']:
        st.success("‚úÖ Todos os dados obrigat√≥rios foram preenchidos!")
    else:
        st.error(f"‚ùå Campos obrigat√≥rios faltando: {', '.join(validacao['campos_faltando'])}")

with col2:
    # Preview da nota estimada
    st.metric(
        "Nota Estimada",
        "8.5",
        help="Nota estimada baseada nos dados preenchidos"
    )

# Expandir para ver dados completos
with st.expander("üìã Ver dados completos do an√∫ncio"):
    st.json(dados_completos)

# Bot√µes de a√ß√£o
col1, col2, col3 = st.columns([1, 1, 2])

with col1:
    if st.button("üíæ Salvar Rascunho", use_container_width=True):
        st.info("Funcionalidade em desenvolvimento")

with col2:
    if st.button("üîÑ Limpar Formul√°rio", use_container_width=True):
        st.rerun()

with col3:
    if st.button(
        "üöÄ Publicar no Canal PRO",
        type="primary",
        use_container_width=True,
        disabled=not validacao['valido']
    ):
        # Adicionar √† sess√£o para processar
        st.session_state['publicar_dados'] = dados_completos
        st.session_state['publicar_timestamp'] = datetime.now()
        
        # Mostrar progresso
        with st.spinner("Publicando an√∫ncio..."):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Simular etapas (substituir por publica√ß√£o real)
            etapas = [
                ("Fazendo login no Canal PRO...", 0.2),
                ("Navegando para criar an√∫ncio...", 0.4),
                ("Preenchendo dados b√°sicos...", 0.6),
                ("Fazendo upload das fotos...", 0.8),
                ("Finalizando publica√ß√£o...", 1.0)
            ]
            
            for etapa, progresso in etapas:
                status_text.text(etapa)
                progress_bar.progress(progresso)
                # Aqui chamaria a fun√ß√£o real de publica√ß√£o
                import time
                time.sleep(1)
            
            # Resultado
            st.success("‚úÖ An√∫ncio publicado com sucesso!")
            st.balloons()
            
            # Mostrar resultado
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("ID do An√∫ncio", "ZAP-123456")
            with col2:
                st.metric("Nota Final", "9.2")
            with col3:
                st.metric("Status", "Ativo")
            
            # Limpar dados da sess√£o
            if 'publicar_dados' in st.session_state:
                del st.session_state['publicar_dados']