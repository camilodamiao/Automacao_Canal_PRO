# pages/2_üìä_Dashboard.py
"""
Dashboard com estat√≠sticas e hist√≥rico
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

from src.utils.database import get_supabase_client, CODIGOS_CORRETOR

st.set_page_config(page_title="Dashboard", layout="wide")

st.title("üìä Dashboard - Canal PRO Publisher")

# Tabs
tab1, tab2, tab3 = st.tabs(["üìà Estat√≠sticas", "üìã C√≥digos do Corretor", "üìú Hist√≥rico"])

with tab1:
    st.header("Estat√≠sticas Gerais")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # Buscar dados reais (simulados por enquanto)
    with col1:
        st.metric(
            "Total de Im√≥veis",
            "42",
            "+5 esta semana"
        )
    
    with col2:
        st.metric(
            "Publicados",
            "8",
            "+2 hoje"
        )
    
    with col3:
        st.metric(
            "Taxa de Sucesso",
            "95%",
            "+5%"
        )
    
    with col4:
        st.metric(
            "Nota M√©dia",
            "8.7",
            "+0.3"
        )
    
    st.markdown("---")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Publica√ß√µes por Dia")
        
        # Dados simulados
        dates = pd.date_range(end=datetime.now(), periods=30)
        df_publicacoes = pd.DataFrame({
            'Data': dates,
            'Publica√ß√µes': [2, 1, 3, 0, 2, 1, 4] * 4 + [2, 3]
        })
        
        fig = px.line(df_publicacoes, x='Data', y='Publica√ß√µes',
                     title="√öltimos 30 dias")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üè† Tipos de Im√≥veis")
        
        # Dados simulados
        df_tipos = pd.DataFrame({
            'Tipo': ['Apartamento', 'Casa', 'Terreno', 'Comercial'],
            'Quantidade': [25, 12, 3, 2]
        })
        
        fig = px.pie(df_tipos, values='Quantidade', names='Tipo',
                    title="Distribui√ß√£o por Tipo")
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("üìã Gest√£o de C√≥digos do Corretor")
    
    # Estat√≠sticas dos c√≥digos
    col1, col2, col3 = st.columns(3)
    
    codigos_em_uso = len([c for c in CODIGOS_CORRETOR if c['em_uso']])
    codigos_livres = len(CODIGOS_CORRETOR) - codigos_em_uso
    
    with col1:
        st.metric("Total de C√≥digos", len(CODIGOS_CORRETOR))
    
    with col2:
        st.metric("Em Uso", codigos_em_uso)
    
    with col3:
        st.metric("Dispon√≠veis", codigos_livres)
    
    st.markdown("---")
    
    # Tabela de c√≥digos
    st.subheader("Lista de C√≥digos")
    
    # Converter para DataFrame
    df_codigos = pd.DataFrame(CODIGOS_CORRETOR)
    
    # Filtros
    col1, col2 = st.columns([1, 3])
    
    with col1:
        filtro_status = st.selectbox(
            "Filtrar por status",
            ["Todos", "Em uso", "Dispon√≠veis"]
        )
    
    # Aplicar filtro
    if filtro_status == "Em uso":
        df_filtered = df_codigos[df_codigos['em_uso'] == True]
    elif filtro_status == "Dispon√≠veis":
        df_filtered = df_codigos[df_codigos['em_uso'] == False]
    else:
        df_filtered = df_codigos
    
    # Exibir tabela
    st.dataframe(
        df_filtered,
        use_container_width=True,
        hide_index=True,
        column_config={
            "codigo": "C√≥digo",
            "data_anuncio": "Data do An√∫ncio",
            "destacado": "Destacado",
            "em_uso": st.column_config.CheckboxColumn("Em Uso")
        }
    )
    
    # Adicionar novo c√≥digo
    with st.expander("‚ûï Adicionar Novo C√≥digo"):
        col1, col2 = st.columns(2)
        
        with col1:
            novo_codigo = st.text_input("C√≥digo")
        
        with col2:
            tipo_codigo = st.selectbox("Tipo", ["Normal", "Destac√°vel"])
        
        if st.button("Adicionar C√≥digo"):
            st.success(f"C√≥digo {novo_codigo} adicionado!")
            # TODO: Implementar adi√ß√£o real

with tab3:
    st.header("üìú Hist√≥rico de Publica√ß√µes")
    
    # Filtros de data
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        data_inicio = st.date_input(
            "De",
            value=datetime.now() - timedelta(days=30)
        )
    
    with col2:
        data_fim = st.date_input(
            "At√©",
            value=datetime.now()
        )
    
    # Dados simulados de hist√≥rico
    historico_data = [
        {
            "Data": "2024-01-15 14:30",
            "C√≥digo Im√≥vel": "AP10657",
            "T√≠tulo": "Apartamento 3 quartos, 125m¬≤",
            "C√≥digo Corretor": "HA00011",
            "Nota": 8.5,
            "Status": "‚úÖ Publicado"
        },
        {
            "Data": "2024-01-15 10:15",
            "C√≥digo Im√≥vel": "CA12203",
            "T√≠tulo": "Casa em condom√≠nio, 200m¬≤",
            "C√≥digo Corretor": "HA00012",
            "Nota": 9.2,
            "Status": "‚úÖ Publicado"
        },
        {
            "Data": "2024-01-14 16:45",
            "C√≥digo Im√≥vel": "AP11074",
            "T√≠tulo": "Apartamento 2 quartos",
            "C√≥digo Corretor": "HA00013",
            "Nota": 7.8,
            "Status": "‚úÖ Publicado"
        }
    ]
    
    df_historico = pd.DataFrame(historico_data)
    
    # Exibir tabela
    st.dataframe(
        df_historico,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Nota": st.column_config.NumberColumn(
                "Nota",
                format="%.1f",
                min_value=0,
                max_value=10
            )
        }
    )
    
    # Exportar dados
    col1, col2 = st.columns([3, 1])
    
    with col2:
        csv = df_historico.to_csv(index=False)
        st.download_button(
            label="üì• Exportar CSV",
            data=csv,
            file_name=f"historico_publicacoes_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )