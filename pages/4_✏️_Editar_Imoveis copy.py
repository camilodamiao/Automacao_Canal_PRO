# pages/4_‚úèÔ∏è_Editar_Imoveis.py
"""
P√°gina para completar dados dos im√≥veis coletados
Foco em preparar os dados antes da publica√ß√£o
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import json
import sys
import requests
import os
import subprocess
import tempfile
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent))

try:
    from src.utils.database import get_supabase_client, check_connection
    supabase = get_supabase_client()
except ImportError as e:
    st.error(f"‚ùå Erro ao importar m√≥dulos: {e}")
    st.error("Verifique se o arquivo src/utils/database.py existe e est√° configurado.")
    st.stop()
except Exception as e:
    st.error(f"‚ùå Erro de conex√£o: {e}")
    st.error("Verifique se as vari√°veis SUPABASE_URL e SUPABASE_KEY est√£o configuradas no .env")
    st.stop()

st.set_page_config(page_title="Editar Im√≥veis", layout="wide")

# CSS customizado para melhorar visual
st.markdown("""
<style>
    .foto-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
        margin: 10px 0;
    }
    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
    }
    .status-novo { background-color: #e3f2fd; color: #1976d2; }
    .status-rascunho { background-color: #fff3e0; color: #f57c00; }
    .status-preparado { background-color: #e8f5e8; color: #388e3c; }
    .status-publicado { background-color: #f3e5f5; color: #7b1fa2; }
</style>
""", unsafe_allow_html=True)

def executar_teste_canal_pro(dados_completos):
    """Executa teste usando subprocess separado - VERS√ÉO FINAL"""
    try:
        # Validar dados essenciais
        if not dados_completos:
            st.error("‚ùå Dados n√£o fornecidos para o teste")
            return False
        
        # Adicionar fotos aos dados (importante!)
        imovel_selecionado = st.session_state.get('imovel_selecionado', {})
        if imovel_selecionado and imovel_selecionado.get('fotos'):
            # Processar fotos
            fotos = []
            fotos_raw = imovel_selecionado['fotos']
            
            if isinstance(fotos_raw, str):
                try:
                    fotos_data = json.loads(fotos_raw)
                    if isinstance(fotos_data, list):
                        fotos = fotos_data
                except json.JSONDecodeError:
                    import re
                    urls = re.findall(r'https?://[^\s,\]"]+', fotos_raw)
                    fotos = urls
            elif isinstance(fotos_raw, list):
                fotos = fotos_raw
            
            dados_completos['fotos'] = fotos
        
        # Criar arquivo tempor√°rio com os dados
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as temp_file:
            json.dump(dados_completos, temp_file, ensure_ascii=False, indent=2)
            temp_path = temp_file.name
            print(f"üîç DEBUG: Arquivo JSON criado em: {temp_path}")
            print(f"üîç DEBUG: Fotos inclu√≠das: {'fotos' in dados_completos}")
            if 'fotos' in dados_completos:
                print(f"üîç DEBUG: Quantidade de fotos: {len(dados_completos.get('fotos', []))}")
           
        
        # Caminho do script executor
        script_executor = Path(__file__).parent.parent / "src" / "automation" / "canal_pro_test_executor.py"
        
        # Verificar se o script existe
        if not script_executor.exists():
            st.error(f"‚ùå Script executor n√£o encontrado em: {script_executor}")
            st.info("üí° Certifique-se de que o arquivo 'canal_pro_test_executor.py' est√° em 'src/automation/'")
            return False
        
        st.info("üöÄ Executando teste em processo separado...")
        st.info("üì± Um browser ser√° aberto automaticamente")
        st.warning("‚ö†Ô∏è **IMPORTANTE: N√ÉO publique o an√∫ncio - √© apenas um teste!**")
        
        # Mostrar progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Preparar ambiente
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        env['PYTHONPATH'] = str(Path(__file__).parent.parent)
        
        # Executar subprocess
        try:
            status_text.text("üîÑ Iniciando processo...")
            progress_bar.progress(0.1)
            
            # Comando para executar
            cmd = [
                sys.executable,
                str(script_executor),
                temp_path
            ]
            
            status_text.text("üåê Abrindo browser...")
            progress_bar.progress(0.3)
            
            # Executar com timeout
            result = subprocess.run(
                cmd,
                capture_output=True, 
                text=True, 
                timeout=300,  # 5 minutos
                cwd=Path(__file__).parent.parent,
                env=env,
                encoding='utf-8',
                errors='replace'
            )
            
            progress_bar.progress(1.0)
            status_text.text("‚úÖ Processo conclu√≠do")
            
            # Processar resultado
            if result.returncode == 0:
                st.success("‚úÖ Teste executado com sucesso!")
                
                if result.stdout:
                    st.text("üìã Log detalhado do teste:")
                    # Mostrar log em expandir para n√£o poluir a tela
                    with st.expander("Ver log completo"):
                        st.text(result.stdout)
                
                # Extrair informa√ß√µes importantes do log
                if "FORMUL√ÅRIO PREENCHIDO COM SUCESSO" in result.stdout:
                    st.success("üéØ **Formul√°rio preenchido corretamente!**")
                if "Login confirmado" in result.stdout:
                    st.success("üîê **Login realizado com sucesso!**")
                if "fotos enviadas" in result.stdout:
                    st.success("üì∏ **Fotos carregadas com sucesso!**")
                
                return True
            else:
                st.error("‚ùå Erro durante execu√ß√£o do teste")
                
                # Mostrar erro detalhado
                if result.stderr:
                    st.error("**Detalhes do erro:**")
                    with st.expander("Ver erro completo"):
                        st.text(result.stderr)
                
                # Mostrar stdout mesmo com erro (pode ter logs √∫teis)
                if result.stdout:
                    st.warning("**Log parcial:**")
                    with st.expander("Ver log"):
                        st.text(result.stdout)
                
                return False
                
        except subprocess.TimeoutExpired:
            st.warning("‚è∞ Teste excedeu tempo limite (5 minutos)")
            st.info("üí° O browser pode ainda estar aberto para inspe√ß√£o manual")
            return False
            
        except FileNotFoundError:
            st.error("‚ùå Python n√£o encontrado no PATH")
            st.error("üí° Verifique se o Python est√° instalado corretamente")
            return False
            
        except Exception as e:
            st.error(f"‚ùå Erro ao executar subprocess: {e}")
            
            # Debug adicional
            st.info("üîç **Informa√ß√µes de debug:**")
            st.write(f"- Script: {script_executor}")
            st.write(f"- Script existe: {script_executor.exists()}")
            st.write(f"- Diret√≥rio trabalho: {Path(__file__).parent.parent}")
            st.write(f"- Python: {sys.executable}")
            
            return False
        finally:
            # Limpar barra de progresso
            progress_bar.empty()
            status_text.empty()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao preparar teste: {e}")
        return False
    finally:
        # Limpar arquivo tempor√°rio
        try:
            if 'temp_path' in locals():
                os.unlink(temp_path)
        except:
            pass

def consultar_cep(cep):
    """Consulta CEP na API ViaCEP"""
    try:
        cep_limpo = cep.replace("-", "").replace(".", "").strip()
        if len(cep_limpo) != 8:
            return None
        
        url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            if "erro" not in data:
                return {
                    "logradouro": data.get("logradouro", ""),
                    "bairro": data.get("bairro", ""),
                    "cidade": data.get("localidade", ""),
                    "estado": data.get("uf", ""),
                    "cep": cep_limpo
                }
    except Exception as e:
        st.error(f"Erro ao consultar CEP: {e}")
    
    return None

def criar_anuncio_se_nao_existe(codigo_imovel):
    """Cria registro na tabela anuncios se n√£o existir"""
    try:
        existing = supabase.table("anuncios").select("*").eq("imovel_codigo", codigo_imovel).execute()
        
        if not existing.data:
            # Criar novo an√∫ncio com valores padr√£o
            dados_anuncio = {
                "imovel_codigo": codigo_imovel,
                "publicado": False,
                "is_highlighted": False,
                "canalpro_id": None,
                "codigo_anuncio_canalpro": None,
                "link_video_youtube": "https://www.youtube.com/watch?v=lk-sj2ZDLDU",
                "link_tour_virtual": "https://www.tourvirtual360.com.br/ibd/",
                "modo_exibicao_endereco": "completo",
                "pronto_para_publicacao": False
            }
            
            result = supabase.table("anuncios").insert(dados_anuncio).execute()
            if result.data:
                st.success("‚ú® Registro de an√∫ncio criado automaticamente!")
                return True
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel criar registro de an√∫ncio: {e}")
    
    return False

def carregar_imoveis():
    """Carrega im√≥veis com seus dados de an√∫ncio"""
    try:
        result = supabase.table("imoveis").select("*, anuncios(*)").order("created_at", desc=True).limit(50).execute()
        return result.data or []
    except Exception as e:
        st.error(f"Erro ao carregar im√≥veis: {e}")
        return []

st.title("‚úèÔ∏è Editar Dados dos Im√≥veis")
st.markdown("Complete as informa√ß√µes dos im√≥veis coletados para prepar√°-los para publica√ß√£o")

imoveis = carregar_imoveis()

if not imoveis:
    st.warning("‚ö†Ô∏è Nenhum im√≥vel encontrado no banco de dados")
    st.info("Fa√ßa o scraping de um im√≥vel primeiro usando o comando:")
    st.code("python gintervale_scraper.py CODIGO")
    st.stop()

# Sele√ß√£o do im√≥vel
st.markdown("### 1Ô∏è‚É£ Selecione o Im√≥vel para Editar")

# Preparar dados para exibi√ß√£o
imoveis_display = []
for imovel in imoveis:
    anuncio_info = imovel.get('anuncios', [])
    
    # L√≥gica de status
    if anuncio_info and len(anuncio_info) > 0:
        anuncio = anuncio_info[0]
        
        if anuncio.get('publicado') == True:
            status_anuncio = "‚úÖ Publicado"
            status_class = "status-publicado"
        elif anuncio.get('pronto_para_publicacao') == True:
            status_anuncio = "üîß Preparado" 
            status_class = "status-preparado"
        elif anuncio.get('codigo_anuncio_canalpro') and anuncio.get('codigo_anuncio_canalpro').strip():
            status_anuncio = "üìù Rascunho"
            status_class = "status-rascunho"
        else:
            status_anuncio = "üÜï Novo"
            status_class = "status-novo"
    else:
        status_anuncio = "üÜï Novo"
        status_class = "status-novo"
    
    # Processar fotos
    fotos = []
    if imovel.get('fotos'):
        try:
            if isinstance(imovel['fotos'], str):
                fotos_data = json.loads(imovel['fotos'])
                if isinstance(fotos_data, list):
                    fotos = fotos_data
                else:
                    fotos = []
            elif isinstance(imovel['fotos'], list):
                fotos = imovel['fotos']
            else:
                fotos = []
        except (json.JSONDecodeError, TypeError):
            fotos_str = str(imovel.get('fotos', ''))
            if fotos_str and fotos_str != 'null':
                import re
                urls = re.findall(r'https?://[^\s,\]"]+', fotos_str)
                fotos = urls
            else:
                fotos = []
    
    imoveis_display.append({
        'codigo': imovel['codigo'],
        'titulo': imovel['titulo'][:60] + '...' if len(imovel['titulo']) > 60 else imovel['titulo'],
        'status': status_anuncio,
        'status_class': status_class,
        'preco': f"R$ {imovel['preco']:,.2f}" if imovel.get('preco') else "Sem pre√ßo",
        'area': f"{imovel['area']}m¬≤" if imovel.get('area') else "-",
        'cidade': imovel.get('cidade', 'N/A'),
        'fotos_count': len(fotos),
        'condominio': f"R$ {imovel.get('condominio', 0):,.2f}" if imovel.get('condominio') else "N/A",
        'iptu': f"R$ {imovel.get('iptu', 0):,.2f}" if imovel.get('iptu') else "N/A",
        'iptu_periodo': imovel.get('iptu_periodo', 'N/A') or 'N/A',
        'codigo_canalpro': anuncio.get('codigo_anuncio_canalpro', '') if anuncio_info and len(anuncio_info) > 0 else ''
    })

# Filtros
col1, col2, col3, col4 = st.columns([2, 1, 1, 1])

with col1:
    filtro_cidade = st.selectbox(
        "Filtrar por cidade",
        ["Todas"] + list(set([i['cidade'] for i in imoveis_display])),
        index=0
    )

with col2:
    filtro_status = st.selectbox(
        "Status",
        ["Todos", "üÜï Novo", "üìù Rascunho", "üîß Preparado", "‚úÖ Publicado"]
    )

with col3:
    mostrar_detalhes = st.checkbox("Mostrar detalhes", value=True)

with col4:
    if st.button("üîÑ Recarregar", help="Recarregar dados do banco"):
        st.cache_data.clear()
        st.rerun()

# Aplicar filtros
df_display = pd.DataFrame(imoveis_display)
df_filtered = df_display.copy()

if filtro_cidade != "Todas":
    df_filtered = df_filtered[df_filtered['cidade'] == filtro_cidade]
if filtro_status != "Todos":
    df_filtered = df_filtered[df_filtered['status'] == filtro_status]

if len(df_filtered) == 0:
    st.warning("Nenhum im√≥vel encontrado com os filtros selecionados.")
    st.stop()

# Exibir tabela
columns_to_show = ['codigo', 'titulo', 'status', 'preco', 'area', 'cidade']
if mostrar_detalhes:
    columns_to_show.extend(['fotos_count', 'condominio', 'iptu', 'iptu_periodo', 'codigo_canalpro'])

st.markdown("**Selecione um im√≥vel clicando na linha:**")
evento = st.dataframe(
    df_filtered[columns_to_show],
    use_container_width=True,
    hide_index=True,
    on_select="rerun",
    selection_mode="single-row",
    column_config={
        "fotos_count": st.column_config.NumberColumn("üì∏ Fotos", format="%d"),
        "status": st.column_config.TextColumn("Status", width="small"),
        "iptu_periodo": st.column_config.TextColumn("Per√≠odo IPTU", width="small"),
        "codigo_canalpro": st.column_config.TextColumn("üè∑Ô∏è C√≥digo Canal PRO", width="medium")
    }
)

if len(evento.selection.rows) == 0:
    st.info("üëÜ Selecione um im√≥vel na tabela acima para editar")
    st.stop()

# Obter im√≥vel selecionado
selected_index = evento.selection.rows[0]
codigo_selecionado = df_filtered.iloc[selected_index]['codigo']

imovel_selecionado = next((i for i in imoveis if i['codigo'] == codigo_selecionado), None)
if not imovel_selecionado:
    st.error("Erro ao carregar dados do im√≥vel selecionado")
    st.stop()

# Salvar im√≥vel selecionado no session state para uso no teste
st.session_state['imovel_selecionado'] = imovel_selecionado

# Verificar se tem an√∫ncio
anuncio_data = {}
if imovel_selecionado.get('anuncios') and len(imovel_selecionado['anuncios']) > 0:
    anuncio_data = imovel_selecionado['anuncios'][0]
else:
    if criar_anuncio_se_nao_existe(codigo_selecionado):
        st.cache_data.clear()
        st.rerun()

st.markdown("---")

# Preview do im√≥vel selecionado
st.markdown(f"### 2Ô∏è‚É£ Editando: {codigo_selecionado}")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown(f"**üìã {imovel_selecionado['titulo']}**")
    st.write(f"üìç {imovel_selecionado.get('localizacao', 'N/A')}")
    
    # Layout de m√©tricas
    col_preco, col_cond = st.columns(2)
    with col_preco:
        st.metric("üí∞ Pre√ßo", f"R$ {imovel_selecionado.get('preco', 0):,.2f}" if imovel_selecionado.get('preco') else "N/A")
    with col_cond:
        st.metric("üè¢ Condom√≠nio", f"R$ {imovel_selecionado.get('condominio', 0):,.2f}" if imovel_selecionado.get('condominio') else "N/A")
    
    col_area, col_iptu, col_periodo = st.columns(3)
    with col_area:
        st.metric("üìê √Årea", f"{imovel_selecionado.get('area', 0)}m¬≤" if imovel_selecionado.get('area') else "N/A")
    with col_iptu:
        st.metric("üèõÔ∏è IPTU", f"R$ {imovel_selecionado.get('iptu', 0):,.2f}" if imovel_selecionado.get('iptu') else "N/A")
    with col_periodo:
        st.metric("üìÖ Per√≠odo IPTU", imovel_selecionado.get('iptu_periodo', 'N/A') or 'N/A')
    
    st.write(f"üè† {imovel_selecionado.get('quartos', 0)} quartos ‚Ä¢ ‚ú® {imovel_selecionado.get('suites', 0)} su√≠tes ‚Ä¢ üõÅ {imovel_selecionado.get('banheiros', 0)} banheiros ‚Ä¢ üöó {imovel_selecionado.get('vagas', 0)} vagas")

with col2:
    # Galeria de fotos
    if imovel_selecionado.get('fotos'):
        try:
            fotos = []
            fotos_raw = imovel_selecionado['fotos']
            
            if isinstance(fotos_raw, str):
                try:
                    fotos_data = json.loads(fotos_raw)
                    if isinstance(fotos_data, list):
                        fotos = fotos_data
                except json.JSONDecodeError:
                    import re
                    urls = re.findall(r'https?://[^\s,\]"]+', fotos_raw)
                    fotos = urls
            elif isinstance(fotos_raw, list):
                fotos = fotos_raw
            
            if fotos and len(fotos) > 0:
                st.write(f"üì∏ **{len(fotos)} fotos dispon√≠veis**")
                
                try:
                    st.image(fotos[0], caption="Preview", use_container_width=True)
                except Exception:
                    st.write("‚ùå Erro ao carregar preview")
                
                with st.expander(f"üñºÔ∏è Ver todas as {len(fotos)} fotos"):
                    cols_per_row = 3
                    for i in range(0, len(fotos), cols_per_row):
                        cols = st.columns(cols_per_row)
                        for j, col in enumerate(cols):
                            if i + j < len(fotos):
                                with col:
                                    try:
                                        st.image(fotos[i + j], caption=f"Foto {i + j + 1}", use_container_width=True)
                                    except:
                                        st.write(f"‚ùå Erro foto {i + j + 1}")
                                        st.caption(f"URL: {fotos[i + j][:50]}...")
            else:
                st.write("üì∏ Fotos n√£o processadas corretamente")
                
        except Exception as e:
            st.write("‚ùå Erro ao processar fotos")
            st.write(f"Debug erro: {e}")
    else:
        st.write("üì∏ Nenhuma foto dispon√≠vel")

st.markdown("---")

# NOVA SE√á√ÉO: Dados do Scraping (review e edi√ß√£o)
st.markdown("### üìù Dados do Scraping (para revis√£o)")

with st.expander("üìã Ver/Editar dados coletados do scraping", expanded=False):
    col1, col2 = st.columns(2)
    
    with col1:
        # T√≠tulo (edit√°vel)
        titulo_editado = st.text_input(
            "T√≠tulo do An√∫ncio",
            value=imovel_selecionado.get('titulo', ''),
            help="T√≠tulo coletado do scraping - pode ser editado",
            key="titulo_input"
        )
        
        # Tipo (readonly)
        st.text_input(
            "Tipo do Im√≥vel",
            value=imovel_selecionado.get('tipo', 'N/A'),
            disabled=True,
            help="Detectado automaticamente pelo scraping"
        )
        
        # Dados num√©ricos (readonly)
        col_nums1, col_nums2 = st.columns(2)
        with col_nums1:
            st.number_input("Quartos", value=imovel_selecionado.get('quartos', 0), disabled=True)
            st.number_input("Banheiros", value=imovel_selecionado.get('banheiros', 0), disabled=True)
        with col_nums2:
            st.number_input("Su√≠tes", value=imovel_selecionado.get('suites', 0), disabled=True)
            st.number_input("Vagas", value=imovel_selecionado.get('vagas', 0), disabled=True)
    
    with col2:
        # Descri√ß√£o (edit√°vel e IMPORTANTE)
        descricao_editada = st.text_area(
            "Descri√ß√£o do An√∫ncio",
            value=imovel_selecionado.get('descricao', ''),
            height=200,
            help="Descri√ß√£o coletada do scraping - IMPORTANTE para o an√∫ncio",
            key="descricao_input"
        )
        
        # Valores (readonly)
        st.text_input("Pre√ßo", value=f"R$ {imovel_selecionado.get('preco', 0):,.2f}", disabled=True)
        st.text_input("√Årea", value=f"{imovel_selecionado.get('area', 0)}m¬≤", disabled=True)
        st.text_input("Condom√≠nio", value=f"R$ {imovel_selecionado.get('condominio', 0):,.2f}", disabled=True)
        st.text_input("IPTU", value=f"R$ {imovel_selecionado.get('iptu', 0):,.2f} ({imovel_selecionado.get('iptu_periodo', 'N/A')})", disabled=True)

st.markdown("---")

# Formul√°rio de edi√ß√£o - SEM st.form para permitir interatividade
st.markdown("### 3Ô∏è‚É£ Complete os Dados")

# Inicializar session state para dados do CEP
if 'cep_data' not in st.session_state:
    st.session_state.cep_data = {}

# Se√ß√£o 1: Endere√ßo
st.markdown("#### üìç Informa√ß√µes de Endere√ßo")

col1, col2 = st.columns([2, 1])

with col1:
    # Campo CEP com consulta autom√°tica
    cep_atual = imovel_selecionado.get('cep', '') or ''
    cep = st.text_input(
        "CEP *",
        value=cep_atual,
        placeholder="00000-000",
        help="Digite o CEP - preenchimento autom√°tico dos outros campos",
        key="cep_input"
    )
    
    # Auto-consulta quando CEP tem 8 d√≠gitos
    if cep and len(cep.replace("-", "").replace(".", "")) == 8:
        if f"cep_consultado_{cep}" not in st.session_state:
            with st.spinner("Consultando CEP..."):
                dados_cep = consultar_cep(cep)
                if dados_cep:
                    st.session_state.cep_data = dados_cep
                    st.session_state[f"cep_consultado_{cep}"] = True
                    st.success("‚úÖ CEP encontrado! Dados preenchidos automaticamente.")
                    st.rerun()
    
    # Bot√£o manual para consultar CEP
    if st.button("üîç Consultar CEP"):
        if cep:
            with st.spinner("Consultando CEP..."):
                dados_cep = consultar_cep(cep)
                if dados_cep:
                    st.session_state.cep_data = dados_cep
                    st.success("‚úÖ CEP encontrado! Dados preenchidos automaticamente.")
                    st.rerun()
                else:
                    st.error("‚ùå CEP n√£o encontrado. Verifique o n√∫mero digitado.")
    
    # Usar dados do CEP se dispon√≠veis, sen√£o usar dados existentes
    endereco_auto = st.session_state.cep_data.get('logradouro', '') if st.session_state.cep_data else ''
    bairro_auto = st.session_state.cep_data.get('bairro', '') if st.session_state.cep_data else ''
    cidade_auto = st.session_state.cep_data.get('cidade', '') if st.session_state.cep_data else ''
    estado_auto = st.session_state.cep_data.get('estado', '') if st.session_state.cep_data else ''
    
    endereco = st.text_input(
        "Endere√ßo (Rua) *",
        value=endereco_auto or imovel_selecionado.get('endereco', '') or '',
        placeholder="Rua Example, 123",
        key="endereco_input"
    )
    
    bairro = st.text_input(
        "Bairro *",
        value=bairro_auto or imovel_selecionado.get('bairro', '') or '',
        placeholder="Centro",
        key="bairro_input"
    )

with col2:
    numero = st.text_input(
        "N√∫mero *",
        value=imovel_selecionado.get('numero', '') or '',
        placeholder="123",
        help="Campo obrigat√≥rio para publica√ß√£o",
        key="numero_input"
    )
    
    complemento = st.text_input(
        "Complemento",
        value=imovel_selecionado.get('complemento', '') or '',
        placeholder="Apto 101",
        key="complemento_input"
    )
    
    # Campos autom√°ticos do CEP ou dados existentes
    cidade = st.text_input(
        "Cidade", 
        value=cidade_auto or imovel_selecionado.get('cidade', ''), 
        disabled=True,
        help="Preenchido automaticamente pelo CEP",
        key="cidade_input"
    )
    estado = st.text_input(
        "Estado", 
        value=estado_auto or imovel_selecionado.get('estado', ''), 
        disabled=True,
        help="Preenchido automaticamente pelo CEP",
        key="estado_input"
    )

st.markdown("---")

# Se√ß√£o 2: Configura√ß√µes de Publica√ß√£o
st.markdown("#### üè∑Ô∏è Configura√ß√µes para Canal PRO")

col1, col2 = st.columns(2)

with col1:
    codigo_anuncio_canalpro = st.text_input(
        "C√≥digo do An√∫ncio Canal PRO",
        value=anuncio_data.get('codigo_anuncio_canalpro', '') or '',
        placeholder="ex: ZAP123456",
        help="C√≥digo √∫nico para identificar o an√∫ncio no Canal PRO",
        key="codigo_canalpro_input"
    )
    
    # Link fixo do YouTube - s√≥ preencher se estiver vazio
    link_video_youtube_default = anuncio_data.get('link_video_youtube') or "https://www.youtube.com/watch?v=lk-sj2ZDLDU"
    link_video_youtube = st.text_input(
        "Link do V√≠deo (YouTube)",
        value=link_video_youtube_default,
        help="Link padr√£o do v√≠deo institucional",
        key="youtube_input"
    )

with col2:
    # Link fixo do Tour Virtual - s√≥ preencher se estiver vazio
    link_tour_virtual_default = anuncio_data.get('link_tour_virtual') or "https://www.tourvirtual360.com.br/ibd/"
    link_tour_virtual = st.text_input(
        "Link do Tour Virtual",
        value=link_tour_virtual_default,
        help="Link padr√£o do tour virtual",
        key="tour_input"
    )
    
    modo_exibicao_endereco = st.selectbox(
        "Modo de Exibi√ß√£o do Endere√ßo",
        ["completo", "somente_rua", "somente_bairro"],
        index=["completo", "somente_rua", "somente_bairro"].index(
            anuncio_data.get('modo_exibicao_endereco', 'completo')
        ),
        help="Como o endere√ßo ser√° exibido no an√∫ncio",
        key="modo_endereco_input"
    )

st.markdown("---")

# Se√ß√£o 3: Preview dos dados que ser√£o enviados ao Canal PRO
st.markdown("#### üìã Preview - Dados para Canal PRO")

with st.expander("üëÅÔ∏è Ver dados que ser√£o enviados ao Canal PRO"):
    preview_cols = st.columns(2)
    
    with preview_cols[0]:
        st.markdown("**üìç Localiza√ß√£o:**")
        st.write(f"‚Ä¢ CEP: {cep}")
        st.write(f"‚Ä¢ Endere√ßo: {endereco}")
        st.write(f"‚Ä¢ N√∫mero: {numero}")
        st.write(f"‚Ä¢ Complemento: {complemento}")
        st.write(f"‚Ä¢ Bairro: {bairro}")
        st.write(f"‚Ä¢ Cidade: {cidade}")
        st.write(f"‚Ä¢ Estado: {estado}")
        
    with preview_cols[1]:
        st.markdown("**üè† Dados do Im√≥vel:**")
        st.write(f"‚Ä¢ Tipo: {imovel_selecionado.get('tipo', 'N/A')}")
        st.write(f"‚Ä¢ Quartos: {imovel_selecionado.get('quartos', 'N/A')}")
        st.write(f"‚Ä¢ Banheiros: {imovel_selecionado.get('banheiros', 'N/A')}")
        st.write(f"‚Ä¢ Vagas: {imovel_selecionado.get('vagas', 'N/A')}")
        st.write(f"‚Ä¢ √Årea: {imovel_selecionado.get('area', 'N/A')}m¬≤")
        st.write(f"‚Ä¢ Pre√ßo: R$ {imovel_selecionado.get('preco', 0):,.2f}")
        
    st.markdown("**üîó Links:**")
    st.write(f"‚Ä¢ V√≠deo: {link_video_youtube}")
    st.write(f"‚Ä¢ Tour Virtual: {link_tour_virtual}")

st.markdown("---")

# Valida√ß√£o e bot√µes
st.markdown("#### ‚úÖ Status de Completude")

# Verificar campos obrigat√≥rios
campos_obrigatorios = {
    'CEP': bool(cep.strip()) if cep else False,
    'Endere√ßo': bool(endereco.strip()) if endereco else False,
    'Bairro': bool(bairro.strip()) if bairro else False,
    'N√∫mero': bool(numero.strip()) if numero else False,
    'Pre√ßo': bool(imovel_selecionado.get('preco')),
    'Fotos (min 3)': len(json.loads(imovel_selecionado.get('fotos', '[]')) if isinstance(imovel_selecionado.get('fotos'), str) else imovel_selecionado.get('fotos', [])) >= 3
}

col1, col2 = st.columns(2)

with col1:
    st.markdown("**Campos Obrigat√≥rios:**")
    for campo, completo in campos_obrigatorios.items():
        icon = "‚úÖ" if completo else "‚ùå"
        st.write(f"{icon} {campo}")

with col2:
    st.markdown("**Campos Opcionais:**")
    opcionais = {
        'C√≥digo Canal PRO': bool(codigo_anuncio_canalpro.strip()) if codigo_anuncio_canalpro else False,
        'V√≠deo YouTube': bool(link_video_youtube.strip()) if link_video_youtube else False,
        'Tour Virtual': bool(link_tour_virtual.strip()) if link_tour_virtual else False,
        'Complemento': bool(complemento.strip()) if complemento else False
    }
    
    for campo, completo in opcionais.items():
        icon = "‚úÖ" if completo else "‚ö™"
        st.write(f"{icon} {campo}")

# Calcular porcentagem de completude
total_obrigatorios = len(campos_obrigatorios)
completos_obrigatorios = sum(campos_obrigatorios.values())
porcentagem = (completos_obrigatorios / total_obrigatorios) * 100

progress_col1, progress_col2 = st.columns([3, 1])
with progress_col1:
    st.progress(porcentagem / 100)
with progress_col2:
    st.metric("Completude", f"{porcentagem:.0f}%")

# Bot√µes de a√ß√£o
col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

with col1:
    salvar_rascunho = st.button(
        "üíæ Salvar Rascunho",
        use_container_width=True,
        help="Salva os dados mesmo se incompletos"
    )

with col2:
    salvar_completo = st.button(
        "‚úÖ Marcar como Pronto",
        type="primary",
        use_container_width=True,
        disabled=porcentagem < 100,
        help="Salva e marca como pronto para publica√ß√£o"
    )

with col3:
    testar_canal_pro = st.button(
        "üîç Testar Canal PRO",
        use_container_width=True,
        disabled=porcentagem < 100,
        help="Abre browser e preenche dados no Canal PRO (sem publicar)"
    )

with col4:
    # Espa√ßo reservado para bot√£o de publica√ß√£o real
    st.button(
        "üöÄ Publicar (em breve)",
        use_container_width=True,
        disabled=True,
        help="Funcionalidade em desenvolvimento"
    )

# Processar clique no bot√£o "Testar Canal PRO"
if testar_canal_pro:
    if porcentagem >= 100:
        # Montar dados completos para o teste
        dados_completos = {
            # Dados do im√≥vel (do scraping)
            'tipo': imovel_selecionado.get('tipo'),
            'quartos': imovel_selecionado.get('quartos'),
            'suites': imovel_selecionado.get('suites'),
            'banheiros': imovel_selecionado.get('banheiros'),
            'vagas': imovel_selecionado.get('vagas'),
            'area': imovel_selecionado.get('area'),
            'preco': imovel_selecionado.get('preco'),
            'condominio': imovel_selecionado.get('condominio'),
            'iptu': imovel_selecionado.get('iptu'),
            'iptu_periodo': imovel_selecionado.get('iptu_periodo'),
            
            # Dados edit√°veis (se foram modificados)
            'titulo': titulo_editado if 'titulo_input' in st.session_state else imovel_selecionado.get('titulo'),
            'descricao': descricao_editada if 'descricao_input' in st.session_state else imovel_selecionado.get('descricao'),
            
            # Dados do formul√°rio de endere√ßo
            'cep': cep,
            'endereco': endereco,
            'numero': numero,
            'complemento': complemento,
            'bairro': bairro,
            'cidade': cidade,
            'estado': estado,
            
            # Configura√ß√µes do Canal PRO
            'codigo_anuncio_canalpro': codigo_anuncio_canalpro,
            'link_video_youtube': link_video_youtube,
            'link_tour_virtual': link_tour_virtual,
            'modo_exibicao_endereco': modo_exibicao_endereco,
        }
        
        # Executar o teste
        sucesso = executar_teste_canal_pro(dados_completos)
        
        if sucesso:
            st.success("‚úÖ Teste do Canal PRO conclu√≠do com sucesso!")
            st.balloons()
        else:
            st.error("‚ùå O teste encontrou problemas. Verifique os logs acima.")
    else:
        st.error("‚ùå Complete todos os campos obrigat√≥rios antes de testar no Canal PRO.")
        campos_faltando = [campo for campo, completo in campos_obrigatorios.items() if not completo]
        st.info(f"üí° Campos faltando: {', '.join(campos_faltando)}")

# Processar submiss√£o dos outros bot√µes (salvar)
if salvar_rascunho or salvar_completo:
    
    # Preparar dados para salvar
    dados_imovel = {
        'cep': cep.strip() if cep.strip() else None,
        'endereco': endereco.strip() if endereco.strip() else None,
        'bairro': bairro.strip() if bairro.strip() else None,
        'numero': numero.strip() if numero.strip() else None,
        'complemento': complemento.strip() if complemento.strip() else None,
        'cidade': cidade.strip() if cidade.strip() else None,
        'estado': estado.strip() if estado.strip() else None,
    }
    
    # Adicionar campos edit√°veis do scraping se foram modificados
    if 'titulo_input' in st.session_state and titulo_editado != imovel_selecionado.get('titulo'):
        dados_imovel['titulo'] = titulo_editado.strip()
    
    if 'descricao_input' in st.session_state and descricao_editada != imovel_selecionado.get('descricao'):
        dados_imovel['descricao'] = descricao_editada.strip()
    
    dados_anuncio = {
        'codigo_anuncio_canalpro': codigo_anuncio_canalpro.strip() if codigo_anuncio_canalpro.strip() else None,
        'link_video_youtube': link_video_youtube.strip() if link_video_youtube.strip() else None,
        'link_tour_virtual': link_tour_virtual.strip() if link_tour_virtual.strip() else None,
        'modo_exibicao_endereco': modo_exibicao_endereco,
        'pronto_para_publicacao': salvar_completo
    }
    
    try:
        # Atualizar dados do im√≥vel na tabela imoveis
        dados_imovel_update = {k: v for k, v in dados_imovel.items() if v is not None}
        
        if dados_imovel_update:
            result_imovel = supabase.table("imoveis").update(dados_imovel_update).eq("codigo", codigo_selecionado).execute()
        
        # Atualizar ou criar dados do an√∫ncio
        existing_anuncio = supabase.table("anuncios").select("*").eq("imovel_codigo", codigo_selecionado).execute()
        
        if existing_anuncio.data:
            # Atualizar an√∫ncio existente
            result_anuncio = supabase.table("anuncios").update(dados_anuncio).eq("imovel_codigo", codigo_selecionado).execute()
        else:
            # Criar novo an√∫ncio
            dados_anuncio['imovel_codigo'] = codigo_selecionado
            dados_anuncio['publicado'] = False
            dados_anuncio['is_highlighted'] = False
            result_anuncio = supabase.table("anuncios").insert(dados_anuncio).execute()
        
        # Feedback de sucesso
        if salvar_completo:
            st.success("‚úÖ Dados salvos e im√≥vel marcado como PRONTO para publica√ß√£o!")
            st.info("üí° Este im√≥vel agora aparecer√° como 'Preparado' na listagem e estar√° pronto para ser testado no Canal PRO.")
            st.balloons()
        else:
            st.success("üíæ Rascunho salvo com sucesso!")
            st.info("üí° Os dados foram salvos como rascunho. Use 'Marcar como Pronto' quando todos os dados estiverem completos.")
        
        # Limpar session state do CEP
        if 'cep_data' in st.session_state:
            del st.session_state.cep_data
        
        # Aguardar um pouco para mostrar mensagem
        import time
        time.sleep(2)
        
        # Recarregar p√°gina para atualizar dados
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar dados: {e}")

# Se√ß√£o de informa√ß√µes adicionais
with st.expander("üìä Informa√ß√µes T√©cnicas"):
    st.markdown("**Dados do Scraping:**")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Coletado em:** {imovel_selecionado.get('scraped_at', 'N/A')}")
        st.write(f"**Tipo:** {imovel_selecionado.get('tipo', 'N/A')}")
        st.write(f"**Quartos:** {imovel_selecionado.get('quartos', 'N/A')}")
        st.write(f"**Su√≠tes:** {imovel_selecionado.get('suites', 'N/A')}")
        st.write(f"**Banheiros:** {imovel_selecionado.get('banheiros', 'N/A')}")
    
    with col2:
        st.write(f"**Vagas:** {imovel_selecionado.get('vagas', 'N/A')}")
        st.write(f"**√Årea:** {imovel_selecionado.get('area', 'N/A')}m¬≤")
        st.write(f"**Condom√≠nio:** R$ {imovel_selecionado.get('condominio', 0):,.2f}")
        st.write(f"**IPTU:** R$ {imovel_selecionado.get('iptu', 0):,.2f} ({imovel_selecionado.get('iptu_periodo', 'N/A')})")
        st.write(f"**Fotos:** {len(json.loads(imovel_selecionado.get('fotos', '[]')) if isinstance(imovel_selecionado.get('fotos'), str) else imovel_selecionado.get('fotos', []))}")
    
    if st.button("üîç Ver JSON Completo"):
        st.json(imovel_selecionado)