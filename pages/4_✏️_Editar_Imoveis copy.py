# pages/4_‚úèÔ∏è_Editar_Imoveis.py
"""
P√°gina para completar dados dos im√≥veis coletados
Foco em preparar os dados antes da publica√ß√£o
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import json
import sys
import requests
import os
import asyncio
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent))

try:
    from src.utils.database import get_supabase_client, check_connection
    supabase = get_supabase_client()
except ImportError as e:
    st.error(f"‚ùå Erro ao importar m√≥dulos: {e}")
    st.error("Verifique se o arquivo src/utils/database.py existe e est√° configurado.")
    st.stop()
except Exception as e:
    st.error(f"‚ùå Erro de conex√£o: {e}")
    st.error("Verifique se as vari√°veis SUPABASE_URL e SUPABASE_KEY est√£o configuradas no .env")
    st.stop()

st.set_page_config(page_title="Editar Im√≥veis", layout="wide")

# CSS customizado para melhorar visual
st.markdown("""
<style>
    .foto-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
        margin: 10px 0;
    }
    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
    }
    .status-novo { background-color: #e3f2fd; color: #1976d2; }
    .status-rascunho { background-color: #fff3e0; color: #f57c00; }
    .status-preparado { background-color: #e8f5e8; color: #388e3c; }
    .status-publicado { background-color: #f3e5f5; color: #7b1fa2; }
</style>
""", unsafe_allow_html=True)

def mapear_tipo_imovel(tipo):
    """Mapeia tipos do scraping para o Canal PRO"""
    mapeamento = {
        'Apartamento': 'APARTMENT',
        'Casa': 'HOME',
        'Terreno': 'ALLOTMENT_LAND',
        'Comercial': 'BUILDING'
    }
    return mapeamento.get(tipo, 'APARTMENT')

def mapear_iptu_periodo(periodo):
    """Mapeia per√≠odo IPTU para o Canal PRO"""
    if not periodo:
        return 'YEARLY'
    if 'Mensal' in str(periodo):
        return 'MONTHLY'
    elif 'Anual' in str(periodo):
        return 'YEARLY'
    return 'YEARLY'  # Padr√£o

import subprocess
import sys
import json
import tempfile
import os
from pathlib import Path

import subprocess
import sys
import json
import tempfile
import os
from pathlib import Path

def executar_teste_canal_pro(dados_completos):
    """Executa teste usando subprocess separado - VERS√ÉO CORRIGIDA"""
    try:
        # Validar dados essenciais
        if not dados_completos:
            st.error("‚ùå Dados n√£o fornecidos para o teste")
            return False
        
        # Criar arquivo tempor√°rio com os dados
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as temp_file:
            json.dump(dados_completos, temp_file, ensure_ascii=False, indent=2)
            temp_path = temp_file.name
        
        # Caminho do script executor
        script_executor = Path(__file__).parent.parent / "src" / "automation" / "canal_pro_test_executor.py"
        
        # Se o script n√£o existir, criar
        if not script_executor.exists():
            try:
                criar_script_executor(script_executor)
                st.info("üìù Script executor criado com sucesso")
            except Exception as e:
                st.error(f"‚ùå Erro ao criar script: {e}")
                return False
        
        st.info("üöÄ Executando teste em processo separado...")
        st.info("üì± Um browser ser√° aberto automaticamente")
        st.warning("‚ö†Ô∏è **IMPORTANTE: N√ÉO publique o an√∫ncio - √© apenas um teste!**")
        
        # Mostrar progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Preparar ambiente
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        env['PYTHONPATH'] = str(Path(__file__).parent.parent)
        
        # Executar subprocess
        try:
            status_text.text("üîÑ Iniciando processo...")
            progress_bar.progress(0.1)
            
            # Comando para executar
            cmd = [
                sys.executable,
                str(script_executor),
                temp_path
            ]
            
            status_text.text("üåê Abrindo browser...")
            progress_bar.progress(0.3)
            
            # Executar com timeout
            result = subprocess.run(
                cmd,
                capture_output=True, 
                text=True, 
                timeout=300,  # 5 minutos
                cwd=Path(__file__).parent.parent,
                env=env,
                encoding='utf-8',
                errors='replace'
            )
            
            progress_bar.progress(1.0)
            status_text.text("‚úÖ Processo conclu√≠do")
            
            # Processar resultado
            if result.returncode == 0:
                st.success("‚úÖ Teste executado com sucesso!")
                
                if result.stdout:
                    st.text("üìã Log detalhado do teste:")
                    # Mostrar log em expandir para n√£o poluir a tela
                    with st.expander("Ver log completo"):
                        st.text(result.stdout)
                
                # Extrair informa√ß√µes importantes do log
                if "FORMUL√ÅRIO PREENCHIDO COM SUCESSO" in result.stdout:
                    st.success("üéØ **Formul√°rio preenchido corretamente!**")
                if "LOGIN confirmado" in result.stdout:
                    st.success("üîê **Login realizado com sucesso!**")
                
                return True
            else:
                st.error("‚ùå Erro durante execu√ß√£o do teste")
                
                # Mostrar erro detalhado
                if result.stderr:
                    st.error("**Detalhes do erro:**")
                    with st.expander("Ver erro completo"):
                        st.text(result.stderr)
                
                # Mostrar stdout mesmo com erro (pode ter logs √∫teis)
                if result.stdout:
                    st.warning("**Log parcial:**")
                    with st.expander("Ver log"):
                        st.text(result.stdout)
                
                return False
                
        except subprocess.TimeoutExpired:
            st.warning("‚è∞ Teste excedeu tempo limite (5 minutos)")
            st.info("üí° O browser pode ainda estar aberto para inspe√ß√£o manual")
            return False
            
        except FileNotFoundError:
            st.error("‚ùå Python n√£o encontrado no PATH")
            st.error("üí° Verifique se o Python est√° instalado corretamente")
            return False
            
        except Exception as e:
            st.error(f"‚ùå Erro ao executar subprocess: {e}")
            
            # Debug adicional
            st.info("üîç **Informa√ß√µes de debug:**")
            st.write(f"- Script: {script_executor}")
            st.write(f"- Script existe: {script_executor.exists()}")
            st.write(f"- Diret√≥rio trabalho: {Path(__file__).parent.parent}")
            st.write(f"- Python: {sys.executable}")
            
            return False
        finally:
            # Limpar barra de progresso
            progress_bar.empty()
            status_text.empty()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao preparar teste: {e}")
        return False
    finally:
        # Limpar arquivo tempor√°rio
        try:
            if 'temp_path' in locals():
                os.unlink(temp_path)
        except:
            pass

def criar_script_executor(script_path):
    """Cria o script executor CORRIGIDO com upload de fotos e verifica√ß√£o de footer funcionando"""
    script_path.parent.mkdir(parents=True, exist_ok=True)
    
    script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script executor CORRIGIDO para teste do Canal PRO
CORRIGE: Upload de fotos + Verifica√ß√£o de footer no local correto + Switches inteligentes
"""

import sys
import json
import os
import time
import requests
import tempfile
from pathlib import Path

# Configurar encoding para Windows
if sys.platform.startswith('win'):
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

try:
    from playwright.sync_api import sync_playwright
except ImportError:
    print("ERRO: Playwright n√£o instalado. Execute: pip install playwright")
    sys.exit(1)

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent.parent))

# Carregar vari√°veis de ambiente
try:
    from dotenv import load_dotenv
    load_dotenv('config/.env')
except ImportError:
    print("AVISO: python-dotenv n√£o encontrado. Configure as vari√°veis manualmente.")

def mapear_tipo_imovel(tipo):
    """Mapeia tipos do scraping para o Canal PRO"""
    mapeamento = {
        'Apartamento': 'APARTMENT',
        'Casa': 'HOME',
        'Terreno': 'ALLOTMENT_LAND',
        'Comercial': 'BUILDING'
    }
    return mapeamento.get(tipo, 'APARTMENT')

def mapear_iptu_periodo(periodo):
    """Mapeia per√≠odo IPTU para o Canal PRO"""
    if not periodo:
        return 'YEARLY'
    if 'Mensal' in str(periodo):
        return 'MONTHLY'
    elif 'Anual' in str(periodo):
        return 'YEARLY'
    return 'YEARLY'

def verificar_estado_switch_inteligente(page, seletores_grupo, nome_campo):
    """Verifica estado de switches problem√°ticos antes de clicar"""
    try:
        print(f"üîç Verificando estado do {nome_campo}...")
        
        elemento_encontrado = None
        seletor_usado = None
        
        for seletor in seletores_grupo:
            try:
                element = page.locator(seletor)
                if element.count() > 0:
                    elemento_encontrado = element.first
                    seletor_usado = seletor
                    print(f"   üìç Elemento encontrado: {seletor}")
                    break
            except:
                continue
        
        if not elemento_encontrado:
            print(f"   ‚úÖ {nome_campo} n√£o encontrado - assumindo que j√° est√° correto")
            return True
        
        try:
            elemento_encontrado.wait_for(state="visible", timeout=5000)
            
            # Verificar se j√° est√° selecionado
            esta_selecionado = False
            
            # M√©todo 1: is_checked()
            try:
                if elemento_encontrado.is_checked():
                    esta_selecionado = True
                    print(f"   ‚úÖ {nome_campo} j√° est√° selecionado (checked)")
            except:
                pass
            
            # M√©todo 2: Classes CSS
            if not esta_selecionado:
                try:
                    classes = elemento_encontrado.get_attribute("class") or ""
                    if any(cls in classes.lower() for cls in ["active", "selected", "checked"]):
                        esta_selecionado = True
                        print(f"   ‚úÖ {nome_campo} j√° est√° selecionado (CSS)")
                except:
                    pass
            
            # M√©todo 3: Input associado (para labels)
            if not esta_selecionado and "label" in seletor_usado.lower():
                try:
                    for_attr = elemento_encontrado.get_attribute("for")
                    if for_attr:
                        input_associado = page.locator(f"#{for_attr}")
                        if input_associado.count() > 0 and input_associado.is_checked():
                            esta_selecionado = True
                            print(f"   ‚úÖ {nome_campo} j√° est√° selecionado (input associado)")
                except:
                    pass
            
            # Se n√£o est√° selecionado, clicar
            if not esta_selecionado:
                print(f"   üñ±Ô∏è {nome_campo} n√£o est√° selecionado, clicando...")
                elemento_encontrado.click()
                time.sleep(0.5)
                print(f"   ‚úÖ {nome_campo} clicado com sucesso")
            
            return True
            
        except Exception as e:
            print(f"   ‚úÖ {nome_campo} - assumindo estado correto (erro: {e})")
            return True
            
    except Exception as e:
        print(f"   ‚úÖ {nome_campo} - continuando (erro geral: {e})")
        return True

def preencher_campo_simples(page, seletor, valor, nome_campo, tipo="input"):
    """Fun√ß√£o original que j√° funcionava perfeitamente"""
    try:
        print(f"üîç Preenchendo {nome_campo}: {valor}")
        
        element = page.locator(seletor)
        element.wait_for(state="visible", timeout=10000)
        
        if tipo == "select":
            element.select_option(str(valor))
            print(f"   ‚úÖ Dropdown {nome_campo} selecionado: {valor}")
        elif tipo == "click":
            element.click()
            print(f"   ‚úÖ Bot√£o {nome_campo} clicado")
        else:
            element.clear()
            element.fill(str(valor))
            print(f"   ‚úÖ Campo {nome_campo} preenchido: {valor}")
        
        time.sleep(0.5)
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERRO ao preencher {nome_campo}: {e}")
        return False

def fazer_upload_fotos(page, fotos_urls):
    """Upload de fotos CORRIGIDO - com logs detalhados"""
    if not fotos_urls or len(fotos_urls) == 0:
        print("üì∏ Nenhuma foto para upload")
        return True
    
    print(f"\\nüì∏ INICIANDO UPLOAD DE {len(fotos_urls)} FOTOS")
    print("-" * 50)
    
    try:
        # 1. BAIXAR FOTOS TEMPORARIAMENTE
        print("üì• FASE 1: BAIXANDO FOTOS...")
        fotos_temp = []
        
        for i, url in enumerate(fotos_urls[:8]):  # M√°ximo 8 fotos
            try:
                print(f"   üì• Baixando foto {i+1}/{len(fotos_urls[:8])}: {url[:60]}...")
                
                response = requests.get(url, timeout=30, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                })
                response.raise_for_status()
                
                # Validar tamanho
                if len(response.content) < 1000:
                    print(f"   ‚ö†Ô∏è Foto {i+1} muito pequena ({len(response.content)} bytes), pulando...")
                    continue
                
                # Determinar extens√£o
                content_type = response.headers.get('content-type', '').lower()
                if 'jpeg' in content_type or 'jpg' in content_type:
                    ext = '.jpg'
                elif 'png' in content_type:
                    ext = '.png'
                elif 'webp' in content_type:
                    ext = '.webp'
                else:
                    ext = '.jpg'
                
                # Salvar temporariamente
                with tempfile.NamedTemporaryFile(suffix=f'_foto_{i+1}{ext}', delete=False) as temp_file:
                    temp_file.write(response.content)
                    temp_path = temp_file.name
                
                fotos_temp.append(temp_path)
                print(f"   ‚úÖ Foto {i+1} baixada: {os.path.basename(temp_path)} ({len(response.content)} bytes)")
                
            except Exception as e:
                print(f"   ‚ùå Erro ao baixar foto {i+1}: {e}")
                continue
        
        if not fotos_temp:
            print("‚ùå NENHUMA FOTO FOI BAIXADA COM SUCESSO")
            return False
        
        print(f"\\n‚úÖ {len(fotos_temp)} fotos baixadas com sucesso!")
        
        # 2. ROLAR AT√â SE√á√ÉO DE UPLOAD
        print("\\nüìú FASE 2: NAVEGANDO AT√â SE√á√ÉO DE UPLOAD...")
        try:
            # Rolar mais devagar para garantir que tudo carregue
            page.evaluate("window.scrollTo(0, document.body.scrollHeight / 2);")
            time.sleep(1)
            page.evaluate("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            print("   ‚úÖ P√°gina rolada at√© o final")
        except:
            print("   ‚ö†Ô∏è Erro ao rolar p√°gina")
        
        # 3. PROCURAR INPUT DE UPLOAD
        print("\\nüîç FASE 3: PROCURANDO INPUT DE UPLOAD...")
        
        seletores_upload = [
            'input[type="file"][name="images"]',           # Mais espec√≠fico
            'input[type="file"][multiple="multiple"]',      # Com multiple
            'input[accept*="image"]',                       # Aceita imagens
            'input[data-cy="zap-file-input"]',             # Data attribute
            'input.zap-file-input__input',                 # Classe espec√≠fica
            'input[type="file"][accept*="jpeg"]',          # JPEG espec√≠fico
            'input[type="file"]'                           # Gen√©rico (√∫ltimo)
        ]
        
        upload_realizado = False
        
        for i, seletor in enumerate(seletores_upload):
            try:
                print(f"   üîç Testando seletor {i+1}/{len(seletores_upload)}: {seletor}")
                
                elements = page.locator(seletor)
                count = elements.count()
                
                if count == 0:
                    print(f"      ‚ùå Nenhum elemento encontrado")
                    continue
                
                print(f"      ‚úÖ {count} elemento(s) encontrado(s)")
                
                # Tentar com cada elemento encontrado
                for j in range(count):
                    try:
                        element = elements.nth(j)
                        
                        # Verificar se o elemento est√° dispon√≠vel
                        element.wait_for(state="attached", timeout=5000)
                        
                        # Verificar atributos do elemento
                        name_attr = element.get_attribute("name") or "sem_name"
                        accept_attr = element.get_attribute("accept") or "sem_accept"
                        class_attr = element.get_attribute("class") or "sem_class"
                        
                        print(f"         üìã Elemento {j+1}: name='{name_attr}', accept='{accept_attr}', class='{class_attr[:30]}...'")
                        
                        # FAZER UPLOAD
                        print(f"         üì§ Fazendo upload com elemento {j+1}...")
                        element.set_input_files(fotos_temp)
                        
                        print(f"         ‚úÖ Upload executado! Aguardando processamento...")
                        time.sleep(3)
                        
                        upload_realizado = True
                        print(f"   üéâ UPLOAD REALIZADO COM SUCESSO usando: {seletor}")
                        break
                        
                    except Exception as e:
                        print(f"         ‚ùå Falha com elemento {j+1}: {e}")
                        continue
                
                if upload_realizado:
                    break
                    
            except Exception as e:
                print(f"      ‚ùå Erro com seletor: {e}")
                continue
        
        # 4. VERIFICAR SE UPLOAD FUNCIONOU
        if upload_realizado:
            print("\\nüîç FASE 4: VERIFICANDO SE UPLOAD FUNCIONOU...")
            
            # Aguardar um pouco para processamento
            time.sleep(3)
            
            # Procurar evid√™ncias de que o upload funcionou
            verificacao_selectors = [
                'img[src*="blob"]',           # Imagens em blob (preview)
                '.image-preview',             # Classe preview
                '.photo-preview',             # Classe photo
                '.uploaded-image',            # Classe uploaded
                '.file-preview',              # Classe file
                'img[alt*="preview"]',        # Alt com preview
                'div[class*="preview"]'       # Div com preview na classe
            ]
            
            upload_confirmado = False
            for selector in verificacao_selectors:
                try:
                    preview_elements = page.locator(selector)
                    count = preview_elements.count()
                    if count > 0:
                        print(f"   ‚úÖ {count} preview(s) encontrado(s) com: {selector}")
                        upload_confirmado = True
                        break
                except:
                    continue
            
            if not upload_confirmado:
                print("   ‚ö†Ô∏è Upload realizado mas sem preview confirmado (normal em alguns casos)")
            
        # 5. LIMPAR ARQUIVOS TEMPOR√ÅRIOS
        print("\\nüóëÔ∏è FASE 5: LIMPANDO ARQUIVOS TEMPOR√ÅRIOS...")
        for foto_temp in fotos_temp:
            try:
                os.unlink(foto_temp)
                print(f"   üóëÔ∏è Removido: {os.path.basename(foto_temp)}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao remover {os.path.basename(foto_temp)}: {e}")
        
        # 6. RESULTADO FINAL
        if upload_realizado:
            print("\\nüéâ UPLOAD DE FOTOS CONCLU√çDO COM SUCESSO!")
            return True
        else:
            print("\\n‚ùå UPLOAD DE FOTOS FALHOU")
            print("üí° Verifique se a se√ß√£o de upload est√° vis√≠vel no formul√°rio")
            return False
            
    except Exception as e:
        print(f"\\n‚ùå ERRO GERAL NO UPLOAD DE FOTOS: {e}")
        return False

def aguardar_e_verificar_footer(page):
    """Verifica footer DENTRO do formul√°rio de cria√ß√£o"""
    print("\\nüîç VERIFICANDO FOOTER NO FORMUL√ÅRIO")
    print("-" * 50)
    
    try:
        # 1. Verificar se estamos na p√°gina correta
        url_atual = page.url
        print(f"üìç URL atual: {url_atual}")
        
        if "listings" in url_atual:
            print("‚ùå ERRO: Ainda estamos na p√°gina de listagens!")
            print("üí° O formul√°rio n√£o foi carregado corretamente")
            return False
        
        # 2. Aguardar formul√°rio carregar completamente
        print("‚è≥ Aguardando formul√°rio carregar...")
        time.sleep(3)
        
        # 3. Rolar at√© o final para garantir que o footer apare√ßa
        print("üìú Rolando at√© o final do formul√°rio...")
        page.evaluate("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        
        # 4. For√ßar valida√ß√£o do formul√°rio
        print("‚úÖ For√ßando valida√ß√£o do formul√°rio...")
        page.evaluate("""
            // For√ßar valida√ß√£o de todos os campos
            const form = document.querySelector('form');
            if (form) {
                const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
                inputs.forEach(input => {
                    if (input.checkValidity) {
                        input.checkValidity();
                    }
                    // Disparar eventos que possam ativar valida√ß√£o
                    input.dispatchEvent(new Event('blur'));
                    input.dispatchEvent(new Event('change'));
                });
                
                // Tentar submeter o form para ativar valida√ß√£o
                try {
                    form.checkValidity();
                } catch(e) {}
            }
        """)
        
        time.sleep(2)
        
        # 5. Procurar o footer/bot√µes
        print("üîç Procurando footer e bot√µes...")
        
        footer_selectors = [
            'footer',
            '.footer',
            'div[class*="footer"]',
            'section[class*="footer"]',
            '.form-footer',
            '.action-buttons',
            '.form-actions',
            'div[class*="action"]',
            'div[class*="button"]'
        ]
        
        footer_encontrado = False
        for selector in footer_selectors:
            try:
                footer = page.locator(selector)
                count = footer.count()
                if count > 0:
                    print(f"   ‚úÖ Footer encontrado: {selector} ({count} elementos)")
                    
                    # Verificar bot√µes dentro do footer
                    for i in range(count):
                        botoes = footer.nth(i).locator("button")
                        botoes_count = botoes.count()
                        if botoes_count > 0:
                            print(f"      üîò {botoes_count} bot√µes encontrados no footer {i+1}")
                            
                            for j in range(botoes_count):
                                try:
                                    texto = botoes.nth(j).inner_text()
                                    visivel = botoes.nth(j).is_visible()
                                    print(f"         - Bot√£o {j+1}: '{texto}' (vis√≠vel: {visivel})")
                                except:
                                    print(f"         - Bot√£o {j+1}: (erro ao ler texto)")
                    
                    footer_encontrado = True
                    break
            except:
                continue
        
        # 6. Se n√£o encontrou footer, procurar bot√µes soltos
        if not footer_encontrado:
            print("‚ö†Ô∏è Footer n√£o encontrado, procurando bot√µes espec√≠ficos...")
            
            botao_selectors = [
                'button:has-text("Criar an√∫ncio")',
                'button:has-text("Publicar")',
                'button:has-text("Finalizar")',
                'button:has-text("Salvar")',
                'button[type="submit"]',
                'input[type="submit"]',
                'button[class*="submit"]',
                'button[class*="primary"]',
                'button[class*="create"]'
            ]
            
            botoes_encontrados = 0
            for selector in botao_selectors:
                try:
                    botoes = page.locator(selector)
                    count = botoes.count()
                    if count > 0:
                        botoes_encontrados += count
                        print(f"   üîò {count} bot√£o(√µes) encontrado(s): {selector}")
                        
                        for i in range(count):
                            try:
                                texto = botoes.nth(i).inner_text()
                                visivel = botoes.nth(i).is_visible()
                                classes = botoes.nth(i).get_attribute("class") or ""
                                print(f"      - '{texto}' (vis√≠vel: {visivel}) - classes: {classes[:50]}")
                            except:
                                print(f"      - Bot√£o {i+1} (erro ao ler propriedades)")
                except:
                    continue
            
            if botoes_encontrados > 0:
                footer_encontrado = True
        
        # 7. For√ßar CSS para mostrar bot√µes ocultos
        print("üîß For√ßando exibi√ß√£o de elementos ocultos...")
        page.evaluate("""
            const style = document.createElement('style');
            style.textContent = `
                footer, .footer, .form-footer, .action-buttons, .form-actions {
                    display: block !important;
                    visibility: visible !important;
                    position: relative !important;
                    opacity: 1 !important;
                    height: auto !important;
                }
                
                button, input[type="submit"] {
                    display: inline-block !important;
                    visibility: visible !important;
                    opacity: 1 !important;
                    pointer-events: auto !important;
                }
            `;
            document.head.appendChild(style);
        """)
        
        time.sleep(1)
        
        # 8. Screenshot do formul√°rio para debug
        screenshot_path = "debug_formulario_completo.png"
        page.screenshot(path=screenshot_path, full_page=True)
        print(f"üì∏ Screenshot do formul√°rio salva: {screenshot_path}")
        
        # 9. Contagem final
        total_botoes = page.locator("button").count()
        total_inputs_submit = page.locator('input[type="submit"]').count()
        
        print(f"\\nüìä RESUMO:")
        print(f"   - Total de bot√µes: {total_botoes}")
        print(f"   - Total de inputs submit: {total_inputs_submit}")
        print(f"   - Footer encontrado: {footer_encontrado}")
        
        if total_botoes == 0 and total_inputs_submit == 0:
            print("\\n‚ùå NENHUM BOT√ÉO ENCONTRADO!")
            print("üí° Poss√≠veis causas:")
            print("   - Formul√°rio com campos obrigat√≥rios vazios")
            print("   - JavaScript ainda processando")
            print("   - Nota do an√∫ncio muito baixa")
            print("   - Problema de layout/CSS")
            return False
        else:
            print(f"\\n‚úÖ {total_botoes + total_inputs_submit} bot√µes/inputs encontrados no total")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar footer: {e}")
        return False

def executar_teste(dados_completos):
    """Fun√ß√£o principal CORRIGIDA com upload e footer funcionando"""
    print("=" * 60)
    print("üöÄ TESTE CANAL PRO - VERS√ÉO CORRIGIDA COMPLETA")
    print("=" * 60)
    
    with sync_playwright() as p:
        print("üåê Abrindo browser...")
        browser = p.chromium.launch(
            headless=False,
            slow_mo=800,  # Um pouco mais lento para garantir carregamento
            args=[
                '--start-maximized',
                '--disable-blink-features=AutomationControlled',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor'
            ]
        )
        
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            locale='pt-BR',
            timezone_id='America/Sao_Paulo',
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        
        page = context.new_page()
        
        try:
            # FASE 1: LOGIN (mant√©m igual)
            print("\\nüîê FASE 1: LOGIN")
            print("-" * 40)
            
            page.goto('https://canalpro.grupozap.com', wait_until='networkidle')
            
            try:
                page.click('button:has-text("Aceitar")', timeout=3000)
                print("üç™ Cookies fechados")
            except:
                print("üç™ Sem cookies")
            
            email = os.getenv('ZAP_EMAIL', '')
            password = os.getenv('ZAP_PASSWORD', '')
            
            if not email or not password:
                print("‚ùå Configure ZAP_EMAIL e ZAP_PASSWORD no .env")
                return False
            
            print(f"üìß Email: {email}")
            preencher_campo_simples(page, 'input[name="email"]', email, "Email")
            preencher_campo_simples(page, 'input[name="password"]', password, "Senha")
            preencher_campo_simples(page, 'button[type="submit"]', None, "Entrar", "click")
            
            print("‚è≥ Aguardando login...")
            page.wait_for_url("**/ZAP_OLX/**", timeout=15000)
            print("‚úÖ Login confirmado!")
            
            # FASE 2: NAVEGA√á√ÉO (mant√©m igual)
            print("\\nüìç FASE 2: NAVEGA√á√ÉO")
            print("-" * 40)
            
            listings_url = "https://canalpro.grupozap.com/ZAP_OLX/0/listings?pageSize=10"
            page.goto(listings_url, wait_until='networkidle')
            
            print("üîç Clicando em 'Criar an√∫ncio'...")
            create_btn = page.get_by_role("button", name="Criar an√∫ncio")
            create_btn.wait_for(state="visible", timeout=10000)
            create_btn.click()
            page.wait_for_load_state("networkidle")
            print("‚úÖ Formul√°rio carregado")
            
            # AGUARDAR FORMUL√ÅRIO CARREGAR COMPLETAMENTE
            time.sleep(4)
            
            # FASE 3: PREENCHIMENTO (com switches inteligentes)
            print("\\nüìù FASE 3: PREENCHIMENTO")
            print("-" * 40)
            
            # Switches com verifica√ß√£o inteligente
            seletores_residencial = [
                'label[for="zap-switch-radio-755_RESIDENTIAL"]',
                'input[value="RESIDENTIAL"]',
                'input[id="zap-switch-radio-755_RESIDENTIAL"]'
            ]
            verificar_estado_switch_inteligente(page, seletores_residencial, "Tipo Residencial")
            
            # Dropdowns e campos (mant√©m igual)
            tipo_mapeado = mapear_tipo_imovel(dados_completos.get('tipo', 'Apartamento'))
            preencher_campo_simples(page, 'select[name="unitType"]', tipo_mapeado, "Tipo do Im√≥vel", "select")
            preencher_campo_simples(page, 'select[name="category"]', 'CategoryNONE', "Categoria", "select")
            
            if dados_completos.get('quartos'):
                preencher_campo_simples(page, 'select[name="bedrooms"]', str(dados_completos['quartos']), "Quartos", "select")
            
            if dados_completos.get('suites'):
                preencher_campo_simples(page, 'select[name="suites"]', str(dados_completos['suites']), "Su√≠tes", "select")
            
            if dados_completos.get('banheiros'):
                preencher_campo_simples(page, 'select[name="bathrooms"]', str(dados_completos['banheiros']), "Banheiros", "select")
            
            if dados_completos.get('vagas'):
                preencher_campo_simples(page, 'select[name="parkingSpaces"]', str(dados_completos['vagas']), "Vagas", "select")
            
            if dados_completos.get('area'):
                preencher_campo_simples(page, 'input[name="usableAreas"]', str(dados_completos['area']), "√Årea √ötil")
            
            if dados_completos.get('tipo') == 'Apartamento':
                preencher_campo_simples(page, 'select[name="unitFloor"]', '0', "Andar", "select")
            
            if dados_completos.get('cep'):
                preencher_campo_simples(page, 'input[name="zipCode"]', dados_completos['cep'], "CEP")
                print("   ‚è≥ Aguardando preenchimento autom√°tico...")
                time.sleep(3)
            
            if dados_completos.get('endereco'):
                preencher_campo_simples(page, 'input[name="street"]', dados_completos['endereco'], "Endere√ßo")
            
            if dados_completos.get('numero'):
                preencher_campo_simples(page, 'input[data-label="n√∫mero"]', dados_completos['numero'], "N√∫mero")
            
            if dados_completos.get('complemento'):
                preencher_campo_simples(page, 'input[name="complement"]', dados_completos['complemento'], "Complemento")
            
            # Switches de endere√ßo e venda
            seletores_endereco_completo = [
                'label[for="zap-switch-radio-688_ALL"]',
                'input[value="ALL"]',
                'input[id="zap-switch-radio-688_ALL"]'
            ]
            verificar_estado_switch_inteligente(page, seletores_endereco_completo, "Endere√ßo Completo")
            
            seletores_venda = [
                'label[for="zap-switch-radio-4070_SALE"]',
                'input[value="SALE"]',
                'input[id="zap-switch-radio-4070_SALE"]'
            ]
            verificar_estado_switch_inteligente(page, seletores_venda, "Opera√ß√£o Venda")
            
            # Pre√ßos e textos
            if dados_completos.get('preco'):
                preco_str = str(int(dados_completos['preco']))
                preencher_campo_simples(page, 'input[name="priceSale"]', preco_str, "Pre√ßo de Venda")
            
            if dados_completos.get('condominio'):
                cond_str = str(int(dados_completos['condominio']))
                preencher_campo_simples(page, 'input[name="monthlyCondoFeeMask"]', cond_str, "Condom√≠nio")
            
            if dados_completos.get('iptu'):
                iptu_str = str(int(dados_completos['iptu']))
                preencher_campo_simples(page, 'input[name="yearlyIptuMask"]', iptu_str, "IPTU")
                
                periodo_mapeado = mapear_iptu_periodo(dados_completos.get('iptu_periodo'))
                preencher_campo_simples(page, 'select[name="period"]', periodo_mapeado, "Per√≠odo IPTU", "select")
            
            if dados_completos.get('codigo_anuncio_canalpro'):
                preencher_campo_simples(page, 'input[name="externalId"]', dados_completos['codigo_anuncio_canalpro'], "C√≥digo do An√∫ncio")
            
            if dados_completos.get('titulo'):
                titulo_truncado = dados_completos['titulo'][:100]
                preencher_campo_simples(page, 'input[name="title"]', titulo_truncado, "T√≠tulo")
            
            if dados_completos.get('descricao'):
                desc_truncada = dados_completos['descricao'][:3000]
                preencher_campo_simples(page, 'textarea[name="description"]', desc_truncada, "Descri√ß√£o")
            
            if dados_completos.get('link_video_youtube'):
                preencher_campo_simples(page, 'input[name="videos"]', dados_completos['link_video_youtube'], "V√≠deo YouTube")
            
            if dados_completos.get('link_tour_virtual'):
                preencher_campo_simples(page, 'input[name="videoTourLink"]', dados_completos['link_tour_virtual'], "Tour Virtual")
            
            # FASE 4: UPLOAD DE FOTOS (NOVO - CORRIGIDO)
            print("\\nüì∏ FASE 4: UPLOAD DE FOTOS")
            print("-" * 40)
            
            if dados_completos.get('fotos'):
                print(f"üì∏ Iniciando upload de {len(dados_completos['fotos'])} fotos...")
                sucesso_upload = fazer_upload_fotos(page, dados_completos['fotos'])
                if sucesso_upload:
                    print("‚úÖ Upload de fotos conclu√≠do!")
                else:
                    print("‚ö†Ô∏è Upload de fotos falhou, mas continuando...")
            else:
                print("üì∏ Nenhuma foto encontrada nos dados")
            
            # FASE 5: VERIFICA√á√ÉO DO FOOTER (CORRIGIDO)
            print("\\nüéØ FASE 5: VERIFICA√á√ÉO DO FOOTER")
            print("-" * 40)
            
            # Aguardar um pouco para tudo processar
            time.sleep(3)
            
            footer_ok = aguardar_e_verificar_footer(page)
            
            # FASE 6: FINALIZA√á√ÉO
            print("\\nüéâ FASE 6: TESTE CONCLU√çDO")
            print("-" * 40)
            
            if footer_ok:
                print("‚úÖ FORMUL√ÅRIO PREENCHIDO E FOOTER VERIFICADO!")
            else:
                print("‚ö†Ô∏è FORMUL√ÅRIO PREENCHIDO MAS FOOTER COM PROBLEMAS")
            
            print("")
            print("üîç INSTRU√á√ïES PARA VERIFICA√á√ÉO MANUAL:")
            print("1. ‚úÖ Verifique se todos os campos est√£o preenchidos")
            print("2. üì∏ Verifique se as fotos foram carregadas")
            print("3. üìú Role at√© o final da p√°gina")
            print("4. üîò Procure pelo bot√£o 'Criar an√∫ncio' no footer")
            print("5. üìä Verifique se a nota do an√∫ncio est√° sendo calculada")
            print("6. üö® Verifique se h√° campos com erro (bordas vermelhas)")
            print("")
            print("‚ö†Ô∏è  IMPORTANTE: ESTE √â APENAS UM TESTE!")
            print("‚ùå N√ÉO PUBLIQUE O AN√öNCIO!")
            print("")
            print("‚è∞ Browser ficar√° aberto por 4 minutos para inspe√ß√£o completa...")
            
            # Tempo estendido para inspe√ß√£o completa
            time.sleep(240)  # 4 minutos
            
            print("\\nüéØ TESTE FINALIZADO COM SUCESSO!")
            return True
            
        except Exception as e:
            print(f"\\n‚ùå ERRO DURANTE TESTE: {e}")
            print("üîç Mantendo browser aberto para debug (30 segundos)...")
            time.sleep(30)
            return False
        finally:
            browser.close()
            print("\\nüö™ Browser fechado")

def main():
    if len(sys.argv) != 2:
        print("Uso: python canal_pro_test_executor.py <arquivo_dados.json>")
        sys.exit(1)
    
    try:
        with open(sys.argv[1], 'r', encoding='utf-8') as f:
            dados_completos = json.load(f)
        
        print(f"üìÑ Dados carregados: {len(dados_completos)} campos")
        
        # Debug das fotos
        if dados_completos.get('fotos'):
            fotos = dados_completos['fotos']
            if isinstance(fotos, list):
                print(f"üì∏ {len(fotos)} fotos encontradas nos dados")
                if len(fotos) > 0:
                    print(f"   üì∏ Primeira foto: {fotos[0][:60]}...")
            else:
                print(f"‚ö†Ô∏è Fotos em formato inesperado: {type(fotos)}")
        else:
            print("üì∏ Nenhuma foto encontrada nos dados")
        
        sucesso = executar_teste(dados_completos)
        
        if sucesso:
            print("\\nüéâ TESTE FINALIZADO COM SUCESSO!")
            sys.exit(0)
        else:
            print("\\nüí• TESTE FALHOU")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå ERRO ao carregar dados: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
'''
    
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)

def consultar_cep(cep):
    """Consulta CEP na API ViaCEP"""
    try:
        cep_limpo = cep.replace("-", "").replace(".", "").strip()
        if len(cep_limpo) != 8:
            return None
        
        url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            if "erro" not in data:
                return {
                    "logradouro": data.get("logradouro", ""),
                    "bairro": data.get("bairro", ""),
                    "cidade": data.get("localidade", ""),
                    "estado": data.get("uf", ""),
                    "cep": cep_limpo
                }
    except Exception as e:
        st.error(f"Erro ao consultar CEP: {e}")
    
    return None

def criar_anuncio_se_nao_existe(codigo_imovel):
    """Cria registro na tabela anuncios se n√£o existir"""
    try:
        existing = supabase.table("anuncios").select("*").eq("imovel_codigo", codigo_imovel).execute()
        
        if not existing.data:
            # Criar novo an√∫ncio com valores padr√£o
            dados_anuncio = {
                "imovel_codigo": codigo_imovel,
                "publicado": False,
                "is_highlighted": False,
                "canalpro_id": None,
                "codigo_anuncio_canalpro": None,
                "link_video_youtube": "https://www.youtube.com/watch?v=lk-sj2ZDLDU",
                "link_tour_virtual": "https://www.tourvirtual360.com.br/ibd/",
                "modo_exibicao_endereco": "completo",
                "pronto_para_publicacao": False
            }
            
            result = supabase.table("anuncios").insert(dados_anuncio).execute()
            if result.data:
                st.success("‚ú® Registro de an√∫ncio criado automaticamente!")
                return True
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel criar registro de an√∫ncio: {e}")
    
    return False

def carregar_imoveis():
    """Carrega im√≥veis com seus dados de an√∫ncio"""
    try:
        result = supabase.table("imoveis").select("*, anuncios(*)").order("created_at", desc=True).limit(50).execute()
        return result.data or []
    except Exception as e:
        st.error(f"Erro ao carregar im√≥veis: {e}")
        return []

st.title("‚úèÔ∏è Editar Dados dos Im√≥veis")
st.markdown("Complete as informa√ß√µes dos im√≥veis coletados para prepar√°-los para publica√ß√£o")

imoveis = carregar_imoveis()

if not imoveis:
    st.warning("‚ö†Ô∏è Nenhum im√≥vel encontrado no banco de dados")
    st.info("Fa√ßa o scraping de um im√≥vel primeiro usando o comando:")
    st.code("python gintervale_scraper.py CODIGO")
    st.stop()

# Sele√ß√£o do im√≥vel
st.markdown("### 1Ô∏è‚É£ Selecione o Im√≥vel para Editar")

# Preparar dados para exibi√ß√£o
imoveis_display = []
for imovel in imoveis:
    anuncio_info = imovel.get('anuncios', [])
    
    # L√≥gica de status
    if anuncio_info and len(anuncio_info) > 0:
        anuncio = anuncio_info[0]
        
        if anuncio.get('publicado') == True:
            status_anuncio = "‚úÖ Publicado"
            status_class = "status-publicado"
        elif anuncio.get('pronto_para_publicacao') == True:
            status_anuncio = "üîß Preparado" 
            status_class = "status-preparado"
        elif anuncio.get('codigo_anuncio_canalpro') and anuncio.get('codigo_anuncio_canalpro').strip():
            status_anuncio = "üìù Rascunho"
            status_class = "status-rascunho"
        else:
            status_anuncio = "üÜï Novo"
            status_class = "status-novo"
    else:
        status_anuncio = "üÜï Novo"
        status_class = "status-novo"
    
    # Processar fotos
    fotos = []
    if imovel.get('fotos'):
        try:
            if isinstance(imovel['fotos'], str):
                fotos_data = json.loads(imovel['fotos'])
                if isinstance(fotos_data, list):
                    fotos = fotos_data
                else:
                    fotos = []
            elif isinstance(imovel['fotos'], list):
                fotos = imovel['fotos']
            else:
                fotos = []
        except (json.JSONDecodeError, TypeError):
            fotos_str = str(imovel.get('fotos', ''))
            if fotos_str and fotos_str != 'null':
                import re
                urls = re.findall(r'https?://[^\s,\]"]+', fotos_str)
                fotos = urls
            else:
                fotos = []
    
    imoveis_display.append({
        'codigo': imovel['codigo'],
        'titulo': imovel['titulo'][:60] + '...' if len(imovel['titulo']) > 60 else imovel['titulo'],
        'status': status_anuncio,
        'status_class': status_class,
        'preco': f"R$ {imovel['preco']:,.2f}" if imovel.get('preco') else "Sem pre√ßo",
        'area': f"{imovel['area']}m¬≤" if imovel.get('area') else "-",
        'cidade': imovel.get('cidade', 'N/A'),
        'fotos_count': len(fotos),
        'condominio': f"R$ {imovel.get('condominio', 0):,.2f}" if imovel.get('condominio') else "N/A",
        'iptu': f"R$ {imovel.get('iptu', 0):,.2f}" if imovel.get('iptu') else "N/A",
        'iptu_periodo': imovel.get('iptu_periodo', 'N/A') or 'N/A',
        'codigo_canalpro': anuncio.get('codigo_anuncio_canalpro', '') if anuncio_info and len(anuncio_info) > 0 else ''
    })

# Filtros
col1, col2, col3, col4 = st.columns([2, 1, 1, 1])

with col1:
    filtro_cidade = st.selectbox(
        "Filtrar por cidade",
        ["Todas"] + list(set([i['cidade'] for i in imoveis_display])),
        index=0
    )

with col2:
    filtro_status = st.selectbox(
        "Status",
        ["Todos", "üÜï Novo", "üìù Rascunho", "üîß Preparado", "‚úÖ Publicado"]
    )

with col3:
    mostrar_detalhes = st.checkbox("Mostrar detalhes", value=True)

with col4:
    if st.button("üîÑ Recarregar", help="Recarregar dados do banco"):
        st.cache_data.clear()
        st.rerun()

# Aplicar filtros
df_display = pd.DataFrame(imoveis_display)
df_filtered = df_display.copy()

if filtro_cidade != "Todas":
    df_filtered = df_filtered[df_filtered['cidade'] == filtro_cidade]
if filtro_status != "Todos":
    df_filtered = df_filtered[df_filtered['status'] == filtro_status]

if len(df_filtered) == 0:
    st.warning("Nenhum im√≥vel encontrado com os filtros selecionados.")
    st.stop()

# Exibir tabela
columns_to_show = ['codigo', 'titulo', 'status', 'preco', 'area', 'cidade']
if mostrar_detalhes:
    columns_to_show.extend(['fotos_count', 'condominio', 'iptu', 'iptu_periodo', 'codigo_canalpro'])

st.markdown("**Selecione um im√≥vel clicando na linha:**")
evento = st.dataframe(
    df_filtered[columns_to_show],
    use_container_width=True,
    hide_index=True,
    on_select="rerun",
    selection_mode="single-row",
    column_config={
        "fotos_count": st.column_config.NumberColumn("üì∏ Fotos", format="%d"),
        "status": st.column_config.TextColumn("Status", width="small"),
        "iptu_periodo": st.column_config.TextColumn("Per√≠odo IPTU", width="small"),
        "codigo_canalpro": st.column_config.TextColumn("üè∑Ô∏è C√≥digo Canal PRO", width="medium")
    }
)

if len(evento.selection.rows) == 0:
    st.info("üëÜ Selecione um im√≥vel na tabela acima para editar")
    st.stop()

# Obter im√≥vel selecionado
selected_index = evento.selection.rows[0]
codigo_selecionado = df_filtered.iloc[selected_index]['codigo']

imovel_selecionado = next((i for i in imoveis if i['codigo'] == codigo_selecionado), None)
if not imovel_selecionado:
    st.error("Erro ao carregar dados do im√≥vel selecionado")
    st.stop()

# Verificar se tem an√∫ncio
anuncio_data = {}
if imovel_selecionado.get('anuncios') and len(imovel_selecionado['anuncios']) > 0:
    anuncio_data = imovel_selecionado['anuncios'][0]
else:
    if criar_anuncio_se_nao_existe(codigo_selecionado):
        st.cache_data.clear()
        st.rerun()

st.markdown("---")

# Preview do im√≥vel selecionado
st.markdown(f"### 2Ô∏è‚É£ Editando: {codigo_selecionado}")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown(f"**üìã {imovel_selecionado['titulo']}**")
    st.write(f"üìç {imovel_selecionado.get('localizacao', 'N/A')}")
    
    # Layout de m√©tricas
    col_preco, col_cond = st.columns(2)
    with col_preco:
        st.metric("üí∞ Pre√ßo", f"R$ {imovel_selecionado.get('preco', 0):,.2f}" if imovel_selecionado.get('preco') else "N/A")
    with col_cond:
        st.metric("üè¢ Condom√≠nio", f"R$ {imovel_selecionado.get('condominio', 0):,.2f}" if imovel_selecionado.get('condominio') else "N/A")
    
    col_area, col_iptu, col_periodo = st.columns(3)
    with col_area:
        st.metric("üìê √Årea", f"{imovel_selecionado.get('area', 0)}m¬≤" if imovel_selecionado.get('area') else "N/A")
    with col_iptu:
        st.metric("üèõÔ∏è IPTU", f"R$ {imovel_selecionado.get('iptu', 0):,.2f}" if imovel_selecionado.get('iptu') else "N/A")
    with col_periodo:
        st.metric("üìÖ Per√≠odo IPTU", imovel_selecionado.get('iptu_periodo', 'N/A') or 'N/A')
    
    st.write(f"üè† {imovel_selecionado.get('quartos', 0)} quartos ‚Ä¢ ‚ú® {imovel_selecionado.get('suites', 0)} su√≠tes ‚Ä¢ üõÅ {imovel_selecionado.get('banheiros', 0)} banheiros ‚Ä¢ üöó {imovel_selecionado.get('vagas', 0)} vagas")

with col2:
    # Galeria de fotos
    if imovel_selecionado.get('fotos'):
        try:
            fotos = []
            fotos_raw = imovel_selecionado['fotos']
            
            if isinstance(fotos_raw, str):
                try:
                    fotos_data = json.loads(fotos_raw)
                    if isinstance(fotos_data, list):
                        fotos = fotos_data
                except json.JSONDecodeError:
                    import re
                    urls = re.findall(r'https?://[^\s,\]"]+', fotos_raw)
                    fotos = urls
            elif isinstance(fotos_raw, list):
                fotos = fotos_raw
            
            if fotos and len(fotos) > 0:
                st.write(f"üì∏ **{len(fotos)} fotos dispon√≠veis**")
                
                try:
                    st.image(fotos[0], caption="Preview", use_container_width=True)
                except Exception:
                    st.write("‚ùå Erro ao carregar preview")
                
                with st.expander(f"üñºÔ∏è Ver todas as {len(fotos)} fotos"):
                    cols_per_row = 3
                    for i in range(0, len(fotos), cols_per_row):
                        cols = st.columns(cols_per_row)
                        for j, col in enumerate(cols):
                            if i + j < len(fotos):
                                with col:
                                    try:
                                        st.image(fotos[i + j], caption=f"Foto {i + j + 1}", use_container_width=True)
                                    except:
                                        st.write(f"‚ùå Erro foto {i + j + 1}")
                                        st.caption(f"URL: {fotos[i + j][:50]}...")
            else:
                st.write("üì∏ Fotos n√£o processadas corretamente")
                
        except Exception as e:
            st.write("‚ùå Erro ao processar fotos")
            st.write(f"Debug erro: {e}")
    else:
        st.write("üì∏ Nenhuma foto dispon√≠vel")

st.markdown("---")

# NOVA SE√á√ÉO: Dados do Scraping (review e edi√ß√£o)
st.markdown("### üìù Dados do Scraping (para revis√£o)")

with st.expander("üìã Ver/Editar dados coletados do scraping", expanded=False):
    col1, col2 = st.columns(2)
    
    with col1:
        # T√≠tulo (edit√°vel)
        titulo_editado = st.text_input(
            "T√≠tulo do An√∫ncio",
            value=imovel_selecionado.get('titulo', ''),
            help="T√≠tulo coletado do scraping - pode ser editado",
            key="titulo_input"
        )
        
        # Tipo (readonly)
        st.text_input(
            "Tipo do Im√≥vel",
            value=imovel_selecionado.get('tipo', 'N/A'),
            disabled=True,
            help="Detectado automaticamente pelo scraping"
        )
        
        # Dados num√©ricos (readonly)
        col_nums1, col_nums2 = st.columns(2)
        with col_nums1:
            st.number_input("Quartos", value=imovel_selecionado.get('quartos', 0), disabled=True)
            st.number_input("Banheiros", value=imovel_selecionado.get('banheiros', 0), disabled=True)
        with col_nums2:
            st.number_input("Su√≠tes", value=imovel_selecionado.get('suites', 0), disabled=True)
            st.number_input("Vagas", value=imovel_selecionado.get('vagas', 0), disabled=True)
    
    with col2:
        # Descri√ß√£o (edit√°vel e IMPORTANTE)
        descricao_editada = st.text_area(
            "Descri√ß√£o do An√∫ncio",
            value=imovel_selecionado.get('descricao', ''),
            height=200,
            help="Descri√ß√£o coletada do scraping - IMPORTANTE para o an√∫ncio",
            key="descricao_input"
        )
        
        # Valores (readonly)
        st.text_input("Pre√ßo", value=f"R$ {imovel_selecionado.get('preco', 0):,.2f}", disabled=True)
        st.text_input("√Årea", value=f"{imovel_selecionado.get('area', 0)}m¬≤", disabled=True)
        st.text_input("Condom√≠nio", value=f"R$ {imovel_selecionado.get('condominio', 0):,.2f}", disabled=True)
        st.text_input("IPTU", value=f"R$ {imovel_selecionado.get('iptu', 0):,.2f} ({imovel_selecionado.get('iptu_periodo', 'N/A')})", disabled=True)

st.markdown("---")

# Formul√°rio de edi√ß√£o - SEM st.form para permitir interatividade
st.markdown("### 3Ô∏è‚É£ Complete os Dados")

# Inicializar session state para dados do CEP
if 'cep_data' not in st.session_state:
    st.session_state.cep_data = {}

# Se√ß√£o 1: Endere√ßo
st.markdown("#### üìç Informa√ß√µes de Endere√ßo")

col1, col2 = st.columns([2, 1])

with col1:
    # Campo CEP com consulta autom√°tica
    cep_atual = imovel_selecionado.get('cep', '') or ''
    cep = st.text_input(
        "CEP *",
        value=cep_atual,
        placeholder="00000-000",
        help="Digite o CEP - preenchimento autom√°tico dos outros campos",
        key="cep_input"
    )
    
    # Auto-consulta quando CEP tem 8 d√≠gitos
    if cep and len(cep.replace("-", "").replace(".", "")) == 8:
        if f"cep_consultado_{cep}" not in st.session_state:
            with st.spinner("Consultando CEP..."):
                dados_cep = consultar_cep(cep)
                if dados_cep:
                    st.session_state.cep_data = dados_cep
                    st.session_state[f"cep_consultado_{cep}"] = True
                    st.success("‚úÖ CEP encontrado! Dados preenchidos automaticamente.")
                    st.rerun()
    
    # Bot√£o manual para consultar CEP
    if st.button("üîç Consultar CEP"):
        if cep:
            with st.spinner("Consultando CEP..."):
                dados_cep = consultar_cep(cep)
                if dados_cep:
                    st.session_state.cep_data = dados_cep
                    st.success("‚úÖ CEP encontrado! Dados preenchidos automaticamente.")
                    st.rerun()
                else:
                    st.error("‚ùå CEP n√£o encontrado. Verifique o n√∫mero digitado.")
    
    # Usar dados do CEP se dispon√≠veis, sen√£o usar dados existentes
    endereco_auto = st.session_state.cep_data.get('logradouro', '') if st.session_state.cep_data else ''
    bairro_auto = st.session_state.cep_data.get('bairro', '') if st.session_state.cep_data else ''
    cidade_auto = st.session_state.cep_data.get('cidade', '') if st.session_state.cep_data else ''
    estado_auto = st.session_state.cep_data.get('estado', '') if st.session_state.cep_data else ''
    
    endereco = st.text_input(
        "Endere√ßo (Rua) *",
        value=endereco_auto or imovel_selecionado.get('endereco', '') or '',
        placeholder="Rua Example, 123",
        key="endereco_input"
    )
    
    bairro = st.text_input(
        "Bairro *",
        value=bairro_auto or imovel_selecionado.get('bairro', '') or '',
        placeholder="Centro",
        key="bairro_input"
    )

with col2:
    numero = st.text_input(
        "N√∫mero *",
        value=imovel_selecionado.get('numero', '') or '',
        placeholder="123",
        help="Campo obrigat√≥rio para publica√ß√£o",
        key="numero_input"
    )
    
    complemento = st.text_input(
        "Complemento",
        value=imovel_selecionado.get('complemento', '') or '',
        placeholder="Apto 101",
        key="complemento_input"
    )
    
    # Campos autom√°ticos do CEP ou dados existentes
    cidade = st.text_input(
        "Cidade", 
        value=cidade_auto or imovel_selecionado.get('cidade', ''), 
        disabled=True,
        help="Preenchido automaticamente pelo CEP",
        key="cidade_input"
    )
    estado = st.text_input(
        "Estado", 
        value=estado_auto or imovel_selecionado.get('estado', ''), 
        disabled=True,
        help="Preenchido automaticamente pelo CEP",
        key="estado_input"
    )

st.markdown("---")

# Se√ß√£o 2: Configura√ß√µes de Publica√ß√£o
st.markdown("#### üè∑Ô∏è Configura√ß√µes para Canal PRO")

col1, col2 = st.columns(2)

with col1:
    codigo_anuncio_canalpro = st.text_input(
        "C√≥digo do An√∫ncio Canal PRO",
        value=anuncio_data.get('codigo_anuncio_canalpro', '') or '',
        placeholder="ex: ZAP123456",
        help="C√≥digo √∫nico para identificar o an√∫ncio no Canal PRO",
        key="codigo_canalpro_input"
    )
    
    # Link fixo do YouTube - s√≥ preencher se estiver vazio
    link_video_youtube_default = anuncio_data.get('link_video_youtube') or "https://www.youtube.com/watch?v=lk-sj2ZDLDU"
    link_video_youtube = st.text_input(
        "Link do V√≠deo (YouTube)",
        value=link_video_youtube_default,
        help="Link padr√£o do v√≠deo institucional",
        key="youtube_input"
    )

with col2:
    # Link fixo do Tour Virtual - s√≥ preencher se estiver vazio
    link_tour_virtual_default = anuncio_data.get('link_tour_virtual') or "https://www.tourvirtual360.com.br/ibd/"
    link_tour_virtual = st.text_input(
        "Link do Tour Virtual",
        value=link_tour_virtual_default,
        help="Link padr√£o do tour virtual",
        key="tour_input"
    )
    
    modo_exibicao_endereco = st.selectbox(
        "Modo de Exibi√ß√£o do Endere√ßo",
        ["completo", "somente_rua", "somente_bairro"],
        index=["completo", "somente_rua", "somente_bairro"].index(
            anuncio_data.get('modo_exibicao_endereco', 'completo')
        ),
        help="Como o endere√ßo ser√° exibido no an√∫ncio",
        key="modo_endereco_input"
    )

st.markdown("---")

# Se√ß√£o 3: Preview dos dados que ser√£o enviados ao Canal PRO
st.markdown("#### üìã Preview - Dados para Canal PRO")

with st.expander("üëÅÔ∏è Ver dados que ser√£o enviados ao Canal PRO"):
    preview_cols = st.columns(2)
    
    with preview_cols[0]:
        st.markdown("**üìç Localiza√ß√£o:**")
        st.write(f"‚Ä¢ CEP: {cep}")
        st.write(f"‚Ä¢ Endere√ßo: {endereco}")
        st.write(f"‚Ä¢ N√∫mero: {numero}")
        st.write(f"‚Ä¢ Complemento: {complemento}")
        st.write(f"‚Ä¢ Bairro: {bairro}")
        st.write(f"‚Ä¢ Cidade: {cidade}")
        st.write(f"‚Ä¢ Estado: {estado}")
        
    with preview_cols[1]:
        st.markdown("**üè† Dados do Im√≥vel:**")
        st.write(f"‚Ä¢ Tipo: {imovel_selecionado.get('tipo', 'N/A')}")
        st.write(f"‚Ä¢ Quartos: {imovel_selecionado.get('quartos', 'N/A')}")
        st.write(f"‚Ä¢ Banheiros: {imovel_selecionado.get('banheiros', 'N/A')}")
        st.write(f"‚Ä¢ Vagas: {imovel_selecionado.get('vagas', 'N/A')}")
        st.write(f"‚Ä¢ √Årea: {imovel_selecionado.get('area', 'N/A')}m¬≤")
        st.write(f"‚Ä¢ Pre√ßo: R$ {imovel_selecionado.get('preco', 0):,.2f}")
        
    st.markdown("**üîó Links:**")
    st.write(f"‚Ä¢ V√≠deo: {link_video_youtube}")
    st.write(f"‚Ä¢ Tour Virtual: {link_tour_virtual}")

st.markdown("---")

# Valida√ß√£o e bot√µes
st.markdown("#### ‚úÖ Status de Completude")

# Verificar campos obrigat√≥rios
campos_obrigatorios = {
    'CEP': bool(cep.strip()) if cep else False,
    'Endere√ßo': bool(endereco.strip()) if endereco else False,
    'Bairro': bool(bairro.strip()) if bairro else False,
    'N√∫mero': bool(numero.strip()) if numero else False,
    'Pre√ßo': bool(imovel_selecionado.get('preco')),
    'Fotos (min 3)': len(json.loads(imovel_selecionado.get('fotos', '[]')) if isinstance(imovel_selecionado.get('fotos'), str) else imovel_selecionado.get('fotos', [])) >= 3
}

col1, col2 = st.columns(2)

with col1:
    st.markdown("**Campos Obrigat√≥rios:**")
    for campo, completo in campos_obrigatorios.items():
        icon = "‚úÖ" if completo else "‚ùå"
        st.write(f"{icon} {campo}")

with col2:
    st.markdown("**Campos Opcionais:**")
    opcionais = {
        'C√≥digo Canal PRO': bool(codigo_anuncio_canalpro.strip()) if codigo_anuncio_canalpro else False,
        'V√≠deo YouTube': bool(link_video_youtube.strip()) if link_video_youtube else False,
        'Tour Virtual': bool(link_tour_virtual.strip()) if link_tour_virtual else False,
        'Complemento': bool(complemento.strip()) if complemento else False
    }
    
    for campo, completo in opcionais.items():
        icon = "‚úÖ" if completo else "‚ö™"
        st.write(f"{icon} {campo}")

# Calcular porcentagem de completude
total_obrigatorios = len(campos_obrigatorios)
completos_obrigatorios = sum(campos_obrigatorios.values())
porcentagem = (completos_obrigatorios / total_obrigatorios) * 100

progress_col1, progress_col2 = st.columns([3, 1])
with progress_col1:
    st.progress(porcentagem / 100)
with progress_col2:
    st.metric("Completude", f"{porcentagem:.0f}%")

# Bot√µes de a√ß√£o
col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

with col1:
    salvar_rascunho = st.button(
        "üíæ Salvar Rascunho",
        use_container_width=True,
        help="Salva os dados mesmo se incompletos"
    )

with col2:
    salvar_completo = st.button(
        "‚úÖ Marcar como Pronto",
        type="primary",
        use_container_width=True,
        disabled=porcentagem < 100,
        help="Salva e marca como pronto para publica√ß√£o"
    )

with col3:
    testar_canal_pro = st.button(
        "üîç Testar Canal PRO",
        use_container_width=True,
        disabled=porcentagem < 100,
        help="Abre browser e preenche dados no Canal PRO (sem publicar)"
    )

with col4:
    # Espa√ßo reservado para bot√£o de publica√ß√£o real
    st.button(
        "üöÄ Publicar (em breve)",
        use_container_width=True,
        disabled=True,
        help="Funcionalidade em desenvolvimento"
    )

# CORRE√á√ÉO PRINCIPAL: Conectar o bot√£o "Testar Canal PRO" √† fun√ß√£o
if testar_canal_pro:
    if porcentagem >= 100:
        # Montar dados completos para o teste
        dados_completos = {
            # Dados do im√≥vel (do scraping)
            'tipo': imovel_selecionado.get('tipo'),
            'quartos': imovel_selecionado.get('quartos'),
            'suites': imovel_selecionado.get('suites'),
            'banheiros': imovel_selecionado.get('banheiros'),
            'vagas': imovel_selecionado.get('vagas'),
            'area': imovel_selecionado.get('area'),
            'preco': imovel_selecionado.get('preco'),
            'condominio': imovel_selecionado.get('condominio'),
            'iptu': imovel_selecionado.get('iptu'),
            'iptu_periodo': imovel_selecionado.get('iptu_periodo'),
            
            # Dados edit√°veis (se foram modificados)
            'titulo': titulo_editado if 'titulo_input' in st.session_state else imovel_selecionado.get('titulo'),
            'descricao': descricao_editada if 'descricao_input' in st.session_state else imovel_selecionado.get('descricao'),
            
            # Dados do formul√°rio de endere√ßo
            'cep': cep,
            'endereco': endereco,
            'numero': numero,
            'complemento': complemento,
            'bairro': bairro,
            'cidade': cidade,
            'estado': estado,
            
            # Configura√ß√µes do Canal PRO
            'codigo_anuncio_canalpro': codigo_anuncio_canalpro,
            'link_video_youtube': link_video_youtube,
            'link_tour_virtual': link_tour_virtual,
            'modo_exibicao_endereco': modo_exibicao_endereco,
        }
        
        st.info("üöÄ Iniciando teste do Canal PRO...")
        st.info("üì± Um browser ser√° aberto automaticamente")
        st.warning("‚ö†Ô∏è **IMPORTANTE: Este √© apenas um TESTE! N√ÉO publique o an√∫ncio!**")
        
        # Executar o teste
        with st.spinner("üîÑ Executando teste no Canal PRO..."):
            sucesso = executar_teste_canal_pro(dados_completos)
            
            if sucesso:
                st.success("‚úÖ Teste do Canal PRO conclu√≠do!")
                st.info("üîç Verifique se todos os campos foram preenchidos corretamente no browser.")
                st.info("üìù Anote quaisquer problemas encontrados.")
            else:
                st.error("‚ùå Erro durante o teste do Canal PRO.")
                st.error("üîß Verifique os logs acima para mais detalhes.")
    else:
        st.error("‚ùå Complete todos os campos obrigat√≥rios antes de testar no Canal PRO.")
        st.info("üí° Voc√™ precisa preencher: CEP, Endere√ßo, Bairro, N√∫mero e ter pelo menos 3 fotos.")

# Processar submiss√£o dos outros bot√µes (salvar)
if salvar_rascunho or salvar_completo:
    
    # Preparar dados para salvar
    dados_imovel = {
        'cep': cep.strip() if cep.strip() else None,
        'endereco': endereco.strip() if endereco.strip() else None,
        'bairro': bairro.strip() if bairro.strip() else None,
        'numero': numero.strip() if numero.strip() else None,
        'complemento': complemento.strip() if complemento.strip() else None,
        'cidade': cidade.strip() if cidade.strip() else None,
        'estado': estado.strip() if estado.strip() else None,
    }
    
    # Adicionar campos edit√°veis do scraping se foram modificados
    if 'titulo_input' in st.session_state and titulo_editado != imovel_selecionado.get('titulo'):
        dados_imovel['titulo'] = titulo_editado.strip()
    
    if 'descricao_input' in st.session_state and descricao_editada != imovel_selecionado.get('descricao'):
        dados_imovel['descricao'] = descricao_editada.strip()
    
    dados_anuncio = {
        'codigo_anuncio_canalpro': codigo_anuncio_canalpro.strip() if codigo_anuncio_canalpro.strip() else None,
        'link_video_youtube': link_video_youtube.strip() if link_video_youtube.strip() else None,
        'link_tour_virtual': link_tour_virtual.strip() if link_tour_virtual.strip() else None,
        'modo_exibicao_endereco': modo_exibicao_endereco,
        'pronto_para_publicacao': salvar_completo
    }
    
    try:
        # Atualizar dados do im√≥vel na tabela imoveis
        dados_imovel_update = {k: v for k, v in dados_imovel.items() if v is not None}
        
        if dados_imovel_update:
            result_imovel = supabase.table("imoveis").update(dados_imovel_update).eq("codigo", codigo_selecionado).execute()
        
        # Atualizar ou criar dados do an√∫ncio
        existing_anuncio = supabase.table("anuncios").select("*").eq("imovel_codigo", codigo_selecionado).execute()
        
        if existing_anuncio.data:
            # Atualizar an√∫ncio existente
            result_anuncio = supabase.table("anuncios").update(dados_anuncio).eq("imovel_codigo", codigo_selecionado).execute()
        else:
            # Criar novo an√∫ncio
            dados_anuncio['imovel_codigo'] = codigo_selecionado
            dados_anuncio['publicado'] = False
            dados_anuncio['is_highlighted'] = False
            result_anuncio = supabase.table("anuncios").insert(dados_anuncio).execute()
        
        # Feedback de sucesso
        if salvar_completo:
            st.success("‚úÖ Dados salvos e im√≥vel marcado como PRONTO para publica√ß√£o!")
            st.info("üí° Este im√≥vel agora aparecer√° como 'Preparado' na listagem e estar√° pronto para ser testado no Canal PRO.")
            st.balloons()
        else:
            st.success("üíæ Rascunho salvo com sucesso!")
            st.info("üí° Os dados foram salvos como rascunho. Use 'Marcar como Pronto' quando todos os dados estiverem completos.")
        
        # Limpar session state do CEP
        if 'cep_data' in st.session_state:
            del st.session_state.cep_data
        
        # Aguardar um pouco para mostrar mensagem
        import time
        time.sleep(2)
        
        # Recarregar p√°gina para atualizar dados
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar dados: {e}")

# Se√ß√£o de informa√ß√µes adicionais
with st.expander("üìä Informa√ß√µes T√©cnicas"):
    st.markdown("**Dados do Scraping:**")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**Coletado em:** {imovel_selecionado.get('scraped_at', 'N/A')}")
        st.write(f"**Tipo:** {imovel_selecionado.get('tipo', 'N/A')}")
        st.write(f"**Quartos:** {imovel_selecionado.get('quartos', 'N/A')}")
        st.write(f"**Su√≠tes:** {imovel_selecionado.get('suites', 'N/A')}")
        st.write(f"**Banheiros:** {imovel_selecionado.get('banheiros', 'N/A')}")
    
    with col2:
        st.write(f"**Vagas:** {imovel_selecionado.get('vagas', 'N/A')}")
        st.write(f"**√Årea:** {imovel_selecionado.get('area', 'N/A')}m¬≤")
        st.write(f"**Condom√≠nio:** R$ {imovel_selecionado.get('condominio', 0):,.2f}")
        st.write(f"**IPTU:** R$ {imovel_selecionado.get('iptu', 0):,.2f} ({imovel_selecionado.get('iptu_periodo', 'N/A')})")
        st.write(f"**Fotos:** {len(json.loads(imovel_selecionado.get('fotos', '[]')) if isinstance(imovel_selecionado.get('fotos'), str) else imovel_selecionado.get('fotos', []))}")
    
    if st.button("üîç Ver JSON Completo"):
        st.json(imovel_selecionado)