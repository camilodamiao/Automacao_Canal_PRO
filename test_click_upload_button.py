#!/usr/bin/env python3
"""
TESTE ISOLADO - Apenas testar clique no bot√£o de upload
Usa o seletor exato do c√≥digo original
"""

import os
import sys
import time
from pathlib import Path
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv('config/.env')

# Configurar encoding para Windows
if sys.platform.startswith('win'):
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

try:
    from playwright.sync_api import sync_playwright
except ImportError:
    print("‚ùå Playwright n√£o instalado!")
    sys.exit(1)

def main():
    print("="*60)
    print("üß™ TESTE DE CLIQUE NO BOT√ÉO DE UPLOAD")
    print("="*60)
    
    email = os.getenv('ZAP_EMAIL')
    password = os.getenv('ZAP_PASSWORD')
    
    if not email or not password:
        print("‚ùå Configure ZAP_EMAIL e ZAP_PASSWORD no .env")
        return False
    
    print(f"üìß Email: {email}")
    print("üîë Senha: ***")
    
    with sync_playwright() as p:
        print("\nüåê Abrindo browser em modo vis√≠vel...")
        browser = p.chromium.launch(
            headless=False,  # Modo headed como solicitado
            slow_mo=800,
            args=['--start-maximized']
        )
        
        context = browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            locale='pt-BR',
            timezone_id='America/Sao_Paulo'
        )
        
        page = context.new_page()
        
        try:
            # 1. LOGIN
            print("\nüîê FASE 1: LOGIN")
            print("-" * 40)
            
            page.goto('https://canalpro.grupozap.com', wait_until='networkidle')
            
            # Fechar cookies
            try:
                page.click('button:has-text("Aceitar")', timeout=3000)
                print("‚úÖ Cookies aceitos")
            except:
                print("‚ÑπÔ∏è  Sem popup de cookies")
            
            # Preencher login
            print("üìù Preenchendo credenciais...")
            page.fill('input[name="email"]', email)
            page.fill('input[name="password"]', password)
            page.click('button[type="submit"]')
            
            print("‚è≥ Aguardando login...")
            page.wait_for_url("**/ZAP_OLX/**", timeout=15000)
            print("‚úÖ Login confirmado!")
            
            # 2. NAVEGAR PARA CRIAR AN√öNCIO
            print("\nüìç FASE 2: NAVEGA√á√ÉO")
            print("-" * 40)
            
            listings_url = "https://canalpro.grupozap.com/ZAP_OLX/0/listings?pageSize=10"
            print(f"üìç Indo para: {listings_url}")
            page.goto(listings_url, wait_until='networkidle')
            
            print("üîç Procurando bot√£o 'Criar an√∫ncio'...")
            create_btn = page.get_by_role("button", name="Criar an√∫ncio")
            create_btn.wait_for(state="visible", timeout=10000)
            create_btn.click()
            
            print("‚è≥ Aguardando formul√°rio carregar...")
            page.wait_for_load_state("networkidle")
            time.sleep(3)  # Aguardar formul√°rio carregar completamente
            
            # 3. PROCURAR E CLICAR NO BOT√ÉO DE FOTOS
            print("\nüì∏ FASE 3: BOT√ÉO DE UPLOAD DE FOTOS")
            print("-" * 40)
            
            # Rolar at√© o final da p√°gina
            print("üìú Rolando at√© o final da p√°gina...")
            page.evaluate("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
            # Usar os seletores EXATOS do c√≥digo original
            print("üîç Procurando bot√£o de adicionar fotos...")
            
            # Primeiro tentar com o seletor principal do c√≥digo
            seletor_principal = 'button:has-text("Adicionar fotos")'
            
            try:
                botao = page.locator(seletor_principal)
                count = botao.count()
                
                if count > 0:
                    print(f"‚úÖ Bot√£o encontrado: '{seletor_principal}'")
                    print(f"   Quantidade: {count}")
                    
                    # Verificar se est√° vis√≠vel
                    if botao.first.is_visible():
                        print("‚úÖ Bot√£o est√° vis√≠vel")
                    else:
                        print("‚ö†Ô∏è  Bot√£o existe mas n√£o est√° vis√≠vel")
                    
                    print("\nüñ±Ô∏è  Clicando no bot√£o...")
                    botao.first.click()
                    
                    print("‚è≥ Aguardando modal abrir...")
                    time.sleep(3)
                    
                    # Verificar se algo mudou na p√°gina
                    print("\nüîç Verificando se modal abriu...")
                    
                    # Procurar por elementos que indicam que o modal est√° aberto
                    modal_selectors = [
                        '.modal',
                        'div[role="dialog"]',
                        '.overlay',
                        'input[type="file"]'
                    ]
                    
                    modal_encontrado = False
                    for selector in modal_selectors:
                        if page.locator(selector).count() > 0:
                            print(f"‚úÖ Poss√≠vel modal encontrado: {selector}")
                            modal_encontrado = True
                            break
                    
                    if not modal_encontrado:
                        print("‚ö†Ô∏è  Nenhum modal √≥bvio detectado")
                        print("   O modal pode ter aberto de forma diferente")
                    
                    print("\n‚úÖ TESTE CONCLU√çDO!")
                    print("üîç Verifique visualmente se o modal de fotos abriu")
                    
                else:
                    print(f"‚ùå Bot√£o '{seletor_principal}' n√£o encontrado!")
                    
                    # Tentar seletor alternativo do c√≥digo original
                    seletor_alternativo = '.zap-gallery-upload__button'
                    print(f"\nüîç Tentando seletor alternativo: {seletor_alternativo}")
                    
                    botao_alt = page.locator(seletor_alternativo)
                    if botao_alt.count() > 0:
                        print(f"‚úÖ Encontrado com seletor alternativo!")
                        botao_alt.first.click()
                        time.sleep(3)
                    else:
                        print("‚ùå Seletor alternativo tamb√©m n√£o encontrou")
                        
                        # Listar bot√µes dispon√≠veis para debug
                        print("\nüìã Listando bot√µes dispon√≠veis na p√°gina:")
                        all_buttons = page.locator("button").all()
                        for i, btn in enumerate(all_buttons[-10:]):  # √öltimos 10 bot√µes
                            try:
                                texto = btn.inner_text()
                                if texto:
                                    print(f"   - '{texto}'")
                            except:
                                pass
                
            except Exception as e:
                print(f"‚ùå Erro ao procurar/clicar bot√£o: {e}")
            
            # Manter browser aberto para inspe√ß√£o
            print("\n‚è∞ Browser permanecer√° aberto por 30 segundos...")
            print("üîç Verifique o estado da p√°gina")
            time.sleep(30)
            
        except Exception as e:
            print(f"\n‚ùå Erro durante teste: {e}")
            print("‚è∞ Mantendo browser aberto por 20 segundos para debug...")
            time.sleep(20)
        finally:
            browser.close()
            print("\nüëã Browser fechado")

if __name__ == "__main__":
    main()